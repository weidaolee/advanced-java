#+TITLE: 線程基本原理

* Java 中的進程與線程的關係
線程是 CPU 調度的最小單位。 一個進程可以擁有多個線程, 每個線程共享進程的內存空間、系統資源, 而進程則是分配系統資源的最小單位。 Java 程序的執行過程是標準的多線程執行過程。 每當我們透過 java 命令執行一個 class 文件時, 實際上就是起了一個 JVM 進程, 在該進程至少會啟動兩個線程, 一個是 main thread, 一個是 GC thread。

* 通用線程結構
一個線程可以基本分為三大部份: Program Counter 程序計數器、stack memory、線程基本訊息。
[[./image/standard-thread-structure.png]]

Program Counter 非常重要, 它紀錄著線程要執行的下一條指令的內存地址。 而 stack memory 為該線程獨立擁有, 用於儲存局部變量。 JDK 1.8 每個線程創建時默認分配 1MB 的 stack memory, 它不受 GC 管理。
* Thread 類
[[./image/thread-class-structure.png]]
** Priority
在 Thread 中有一個 private int priority, 並且可以透過 public final void setPriority(int priority) 來設置, 但最小為 1, 最大為 10, 默認為 5, 這是設置在 Thread 的 static attributes:
#+begin_src java
public static final int MIN_PRIORITY = 1;
public static final int NORM_PRIORITY = 5;
public static final int MAX_PRIORITY = 10;
#+end_src
** Deamon
守護線程 deamon 是一種進程運行時提供後台服務的一種線程, 比如 GC 線程。

** start and run
*** start()
當我們 new 出一個 Thread Object, 此時該線程處在 NEW 狀態, 也就是 Java 已經準備好這個對象, 我已經可以操控這個對象的一切方法, 但是 OS 層面並沒有真正存在這個線程, 這是為了避免資源的浪費, 因為當我們在 OS 層面也準備好線程時會佔用資源, 直到當我們要真正啟動這個線程時, 需要調用 Thread.start(), 此時 JVM 才會在 OS 層面分配線程需要的資源, 一旦創建好線程的狀態就會切換成 RUNNABLE, 並脫離 JVM 的控制。 以下是 start 的 source code:
#+begin_src java
    public synchronized void start() {
        /**
         * This method is not invoked for the main method thread or "system"
         * group threads created/set up by the VM. Any new functionality added
         * to this method in the future may have to also be added to the VM.
         *
         * A zero status value corresponds to state "NEW".
         */
        if (threadStatus != 0)
            throw new IllegalThreadStateException();

        /* Notify the group that this thread is about to be started
         * so that it can be added to the group's list of threads
         * and the group's unstarted count can be decremented. */
        group.add(this);

        boolean started = false;
        try {
            start0();
            started = true;
        } finally {
            try {
                if (!started) {
                    group.threadStartFailed(this);
                }
            } catch (Throwable ignore) {
                /* do nothing. If start0 threw a Throwable then
                  it will be passed up the call stack */
            }
        }
    }

    private native void start0();
#+end_src


有幾點可以注意一下:
 1. 調用 start() 時, 會檢查 threadStatus 是否為 NEW, 不是的話會直接拋異常
 2. 當確認狀態為 NEW 後, 首先將自己加入 threadGroup, threadGroup 會知道這個線程將要啟動
 3. 真正的啟動是 start0(), 它是 native 的實現, 如果有報錯的話會在 try catch 中報錯

*** run()
run() 裡面我們要實現 *線程啟動後, 真正要執行的邏輯。* run() 不是給我們調用的, 當 start() 被調用後, 當一旦有空閒的 CPU 讓出, 就會執行 run() 的代碼。

#+begin_src java
    /* What will be run. */
    private Runnable target;
    /*...*/

    public void run() {
        if (target != null) {
            target.run();
        }
    }
#+end_src

注意, 如果我們今天 extends 了 Thread 然後重寫 run(), 那麼當 run() 被定用時, 會直接執行我們的重寫的 run(); 而當我們使用 Runnable 接口時, 這裡是一個 strategy pattern, 執行 run() 的代碼被封裝到一個 Runnable 的 object 裡面。
* 線程調度
現代 OS 提供了強大的線程管理能力, Java 不需要在獨立進行線程管理和調度, 而是委託給 OS 的調度進程去完成, JVM 甚至將 Java 線程一對一的對應到 OS 的線程, 徹底委託給 OS
** 線程調度與時間分片
CPU 的計算頻率非常高, 每秒可以計算數十億次, 因此可將 CPU 的運算做毫秒級的分段, 每一小段稱為一個 CPU 時間片, 一個 OS 如果提供的時間片為 20 毫秒, 並工作在一個頻率為 2GHz 的 CPU 上, 則一個 CPU 時間片可以進行 20 億 / (1000/20) = 4000 萬次計算。

目前 OS 的主聊調度方式是: 基於 CPU 時間分片去調度, 線程只有被分配到 CPU 時間片才能執行指令。 線程在等待時間片的時候處於可運行態, 被份配到 CPU 時間片時處於執行態。
線程調度有兩種模型:
 * 分時調度
   系統平均分配 CPU 時間片, 所有線程輪流佔用 CPU, 在分配上每個線程獲得時間片的機會均等。
   示意:
   Thread 1 >||>||>||>
   Thread 2 |>||>||>||
   Thread 3 ||>||>||>|
   CPU      >>>>>>>>>>
 * 搶佔調度
   系統按照優先級分配時間片, 優先級高有更高的機率獲得 CPU 時間片, 優先級相同時隨機匴一個。 由於分時調度只是搶佔調度下, 所有線程優先級相等的一種特例, 所以大多數系統實現的是搶佔式調度, 而 Java 既然是委託給系統調度, 所以也實現搶佔式調度。
* 通用線程的生命週期
通用的線程模型可以用下圖表示:
[[https://static001.geekbang.org/resource/image/9b/e5/9bbc6fa7fb4d631484aa953626cf6ae5.png]]
 * 初始態
   指線程已經被創建, 但是還不能被執行。 之所以不能被執行, 是因為這個 *創建* 是語言層面的創建, 也就是說這個狀態是語言層面的狀態, 在操作系統層面真正的線程還沒被創建。
 * 可運行態
   線程可以真正被執行, 此時操作系統才真正創建好了線程, 這是等待調度、分配給 CPU 執行的狀態。
 * 運行態
   當有 CPU 空閒時, 操作系統會分配給該 CPU 一個處於可運行態的線程執行, 被分配給 CPU 執行的線程會切換成運行態。
 * 休眠態
   運行態的線程如果調用了一個阻塞的 API, 例如以阻塞的方式讀文件, 或者等待某事件, 比如等待條件變量被滿足, 那麼運行態的線程會切換成休眠態, 並且釋放 CPU, 使 CPU 成為空閒的 CPU, 注意, 處在休眠的線程永遠不會被 CPU 執行。
 * 中止態
   線程執行完, 或是線程異常中止時, 就會進入中止態。 處於中止態的線程不會再切換成任何其他的狀態, 這就是線程生命週期的終點了。

這五種狀態, 在高級語言中有各自的簡化, 例如: C 語言的 POSIX Threads 規範, 把初始態和可運行態合併, 因為於這種貼著 OS 編程的語言來說, 創建好的線程就是 ready 了。 而 Java 則將可運行態和運行態合併, 對於 JVM 來說, 所謂的運行, 就是把線程調度交給操作系統, 這兩種狀態的分別只有在操作系統層面是有意義的, JVM 不關心這兩種狀態的分別。

除了簡化, 有些高級語言會對一些狀態細化, 比如 Java 細化了休眠態, 我們在下一節詳細討論 Java 線程的生命週期模型。
* Java 線程的生命週期
Java 線程的生命週期和通用線程的生命週期的不同點在於, Java 線程的生命週期面向的是 JVM, 而通用線程的生命週期面向的是 OS。

Java 線程的生命週期有六種狀態, 其中 *NEW* 對應的是 *初始化狀態*, 當 Thread 類的 Object 被創建後就處於 NEW 狀態, 這是 Java 層面上的狀態, 在 OS 層面還沒被準備好。 *TERMINATED* 對應的是 *中止態*, 而 *可運行態* 和 *運行態* 被合併成 *RUNNABLE 可運行態*, 意思是線程可運行/正在運行, 具體是哪種要看線程是否取得 CPU 時間分片, 而 *休眠態* 則是細化成三種: *BLOCKED 阻塞中* 、 *WAITING 無限等待中* 、 *TIME_WAITING 有限等待中*, 所以 Java 線程的生命週期可以這樣表示:
[[https://static001.geekbang.org/resource/image/3f/8c/3f6c6bf95a6e8627bdf3cb621bbb7f8c.png]]

** NEW to RUNNABLE
任何一種高級語言的線程都是基於操作系統的線程的, 也就是, 高級語言把對操作系統線程的調用封裝, 對外只暴露高級語言的線程方法, 所以首先我們先解決第一件事情, 也就是 NEW 如何切換成 RUNNABLE。

Java 剛創建出來的 Thread 的實例就是一個處在 NEW 狀態的線程, 創建 Thread 的 instance 有兩種方法, *第一種方法是繼承 Thread, 並重寫 run()*:
#+begin_src java
class MyThread extends Thread {
    @Override
    public void run() {
        //...
    }
}
#+end_src
另一種是實現 Runnable 接口:
#+begin_src java
class A implements Runnable {
    @Override
    public void run() {
        //...
    }
}
#+end_src

當有程序 new 了 Thread 類的 instance, 或是 new 了實現 Runnable 接口的 instance, 這些線程都只是處在 NEW 狀態, 真正要轉換為 RUNNABLE, 只需要有程序要調用該實例的 start() 方法:
#+begin_src java
Mythread t = new MyThread();
t.start();
#+end_src
** RUNNABLE to BLOCKED
只有一種情況下, 線程會觸發這種轉換, 就是線程等待 synchronized 的隱式鎖, 也就是線程正在臨界區外等待。 之前說過, synchronized 修飾的方法體與 code block 會在代碼中規劃出一個臨界區, 這個區域只有一個線程可以進入, 其他線程只能等待。 而這些等待的線程就處於 BLOCKED 狀態。

有一個很容易導致混搖的問題: 當我們調用 Java 的阻塞 API 時, 線程是否會切換成 BLOCKED 狀態? 答案其實是 *並不會*, 這個所謂的阻塞的 API 指的是 OS 層面的狀態轉換, 當調用阻塞 API 時, OS 層面的線程是真的會處於休眠狀態的, 但是 JVM 的線程狀態依然是 RUNNABLE, 因為調度權依然在 OS 手上。要再次強調, Java 線程的生命週期和通用線程的生命週期的不同點在於, Java 線程的生命週期面向的是 JVM, 而通用線程的生命週期面向的是 OS, JVM 並不關心操作系統層面的調度狀態, 因為在 JVM 看來, 等待 CPU 的使用權 (OS 的可執行態), 與等待 I/O (休眠態) 都是在操作系統等待/調度一種資源, 所以都是操作系統層面的調用。

所以, 當我們調用 Java 的阻塞 API 時, 線程的阻塞, 指的是 OS 層面的狀態, 不是 Java 的線程狀態。
** RUNNABLE to WAITING
這種狀態轉換有三種可能會觸發:

第一種, 線程上鎖成功, 但是條件變量沒滿足, 觸發了 Object.wait()。

第二種, 調用無參數的 Thread.join() 方法。 其中, Thread.join() 方法是一種線程同步的方法, 例如有一個 Thread A, 當調用 A.join() 時, 執行 A.join() 的線程會等待 Thread A 的 run() 執行完畢, 而等待 A.run() 執行的時候, 就會從 RUNNABLE 切換到 WAITING。

第三種, 調用 LockSupport.park() 方法。 SDK 併發工具包鎖, 都是基於 LockSupport 實現的, 調用 LockSupport.park() 方法後的線程會被阻塞, 線程的狀態會從 RUNNABLE 切換到 WAITING, 而當調用 LockSupport.unpark(Thread thread), 可以喚醒 thread, thread 會從 WAITING 切換成 RUNNABLE。
** RUNNABLE to TIME_WAITING
切換到 TIME_WAITING 狀態, 都是帶有超時性質的方法調用:
1. 調用帶超時參數的 Thread.sleep(long millis)
2. 調用帶超時參數的 Object.wait(long timeout)
3. 調用帶超時參數的 Thread.join(long millis)
4. 調用帶超時參數的 LockSupport.parkNanos(Object blocker, long deadline)
5. 調用帶超時參數的 LockSupport.parkUntil(long deadline)
** RUNNABLE to TERMINATED
當 Thread.run() 執行完, 或是執行時拋出異常, 該線程會自動切換到 TERMINATED。 有時候我們想要強制中斷 Thread.run() 的執行怎麼辦? 比如, run() 有一個遠程調用, 但是網路實在太慢了, 想要強行中止。 Thread 對象裡有一個 stop() 方法, 不過已經被標記為 @Deprecated, 所以建議不要使用。 正確的姿勢是調用 interrupt() 方法。

* interrupt
我們剛才提到, 當想要中斷一個線程, 應該使用 interrupt 而不是使用 stop, 在此我們先比較兩者的區別:
 * stop
   stop() 這個方法是一種非常暴力的方法, 會真的直接殺死線程, 如果線程擁有 ReetrantLock, 被 stop() 的線程並不會自動調用 ReetrantLock 的 unlock() 去釋放鎖, 這樣沒有任何線程有機會能獲得這個 ReetrantLock, 類似的方法還有 suspend() 和 resume(), 這些都是非常危險的方法。

 * interrupt
   interrupt() 方法則溫柔多了, 它僅僅只會通知線程, 被通知的線程可以執行一些後續操作, 當然也可以選擇無視這個通知, 看得出來這是一種線程同步的手段。 而被 interrupt() 的線程, 是怎麼收到通知的呢? 一種是異常, 一種是主動檢測。

source code:
#+begin_src java
    private volatile Interruptible blocker;

    private final Object blockerLock = new Object();

    public void interrupt() {
        if (this != Thread.currentThread())
            checkAccess();

        synchronized (blockerLock) {
            Interruptible b = blocker;
            if (b != null) {
                interrupt0();           // Just to set the interrupt flag
                b.interrupt(this);
                return;
            }
        }
        interrupt0();
    }
#+end_src

我們可以看到, 要執行 interrupt 時要先取得 blockerLock, 這是一個 this 級別的 lock, 這也就保證了被 interrupt 後的線程對收到中斷的處理是線程安全的。 另外這裡 blocker 的 b.interrupt 提供的是 strategy pattern 的性質, 而 interrupt0 僅僅只是更新了 interrupt flag, 使下一個檢查點可以發現被 interrupt。

我們可以再思考一下, 以 blockerLock 來保護被 interrupt 後的線程對收到中斷的處理是線程安全的, 這點是不是肯定的? 如果 blocker 是私有的, 且只有 this 可以調用 blocker, 那麼它才是線程安全的, 而 Interruptible 的 interrupt 方法的實現如果沒考慮周到, 有可能會導致線程安全問題。

interrupt 一個線程的方式有兩種, 一種是透過異常中斷, 一種是透過主動檢測, 兩種方式都強烈依賴線程處在什麼狀態。
** 透過異常中斷
 * interrupt 一個不活躍的線程
   當線程 A 處於 WAITING 或 TIME_WAITING 時, 有線程調用了 A.interrupt(), 會使 A 返回 RUNNABLE, 同時, A 會立刻觸發 InterruptedException, 這樣就能進入異常處裡的代碼。 我們上面提到 RUNNABLE 在 WAITING 或 TIME_WAITING 切換時, 都是調用了類似 wait()、join()、sleep() 这样的方法, 去看這些方法的簽名, 都有 throws InterruptedException, 這個異常的觸發條件就是: 有人調用了該線程對象的 interrupt() 方法。

 * interrupt 一個活躍的線程
   當線程 A 處於 RUNNABLE 時, 並且被阻塞在 java.nio.channels.InterruptibleChannel 上時, 如果其他線程調用 A 的 interrupt 方法, 線程 A 會觸發 java.nio.channels.ClosedByInterruptException 這個異常, 然後可以進入異常處理; 而如果被阻塞在 java.nio.channels.Selector 上時, 如果其他線程調用 A 的 interrupt 方法, 線程 A 會立刻返回。

** 透過主動檢測
如果線程 A 處在 RUNNABLE 狀態, 但是並沒有阻塞在 I/O 上, 而是真的在運行中, 此時就必須透過主動檢測的方式來 interrupt, 在代碼中必須實現 if(isInterrupted()) 來聲明中斷檢查點, 不過依然是要有別的線程調用 A.interrupt()。

** interrupt 案例
調用 Thread.interrupt, 其實是把 Thread 對象的 *interrupt flag* 改成 *interrupted*, 在有中斷檢查的方法被調用時, 才會觸發中斷檢查, 這點很重要, 因為在觸發 InterruptedException 的線程會回到 RUNNABLE 狀態, 此時可以主動退出程序, 使線程進入 TERMINATED 狀態。 試分析以下代碼能否透過 break 退出:
#+begin_src java
Thread th = Thread.currentThread();
while(true) {
  if(th.isInterrupted()) {
    break;
  }
  // ...
  try {
    Thread.sleep(100);
  }catch (InterruptedException e){
    e.printStackTrace();
  }
}
#+end_src

th 運行後通常處於 sleep() 狀態, 如果有線程調用 th.interrupt(), 此時 th 會觸發 InterruptedException, 這時 th 會從 TIME_WAITING 切換成 RUNNABLE, 這會執行 printStackTrace, 然後又會進入 while 循環, 因為線程在 TIME_WAITING 時已經被 interrupt 過了, 如果要透過 if(th.isInterrupted()), 可以這樣做:
#+begin_src java
Thread th = Thread.currentThread();
while(true) {
  if(th.isInterrupted()) {
    break;
  }
  // ...
  try {
    Thread.sleep(100);
  }catch (InterruptedException e){
    Thread.currentThread().interrupt();
    e.printStackTrace();
  }
}
#+end_src

第一次被 interrupt 時, th 被喚醒成 RUNNABLE, 進入異常處理的代碼, 此時 Thread.currentThread().interrupt() 這一行代碼又會把中斷 flag 標記為 interrupted, 當程序執行到下一個 interrupt 檢查點, 也就是 if(th.isInterrupted()) 時, 透過 break 退出。

* sleep
sleep 的有兩種 overload 版本:
#+begin_src java
    /**
     * Causes the currently executing thread to sleep (temporarily cease
     * execution) for the specified number of milliseconds, subject to
     * the precision and accuracy of system timers and schedulers. The thread
     * does not lose ownership of any monitors.
     *
     * @param  millis
     *         the length of time to sleep in milliseconds
     *
     * @throws  IllegalArgumentException
     *          if the value of {@code millis} is negative
     *
     * @throws  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown.
     */

    public static native void sleep(long millis) throws InterruptedException;
    /**
     * Causes the currently executing thread to sleep (temporarily cease
     * execution) for the specified number of milliseconds plus the specified
     * number of nanoseconds, subject to the precision and accuracy of system
     * timers and schedulers. The thread does not lose ownership of any
     * monitors.
     *
     * @param  millis
     *         the length of time to sleep in milliseconds
     *
     * @param  nanos
     *         {@code 0-999999} additional nanoseconds to sleep
     *
     * @throws  IllegalArgumentException
     *          if the value of {@code millis} is negative, or the value of
     *          {@code nanos} is not in the range {@code 0-999999}
     *
     * @throws  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown.
     */
    public static void sleep(long millis, int nanos) throws InterruptedException {
        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
            millis++;
        }

        sleep(millis);
    }
#+end_src
sleep 的作用是, 讓執行中的線程進入休眠, 線程會進入 TIME_WAITING 狀態。注意 sleep 的簽名: throws InterruptedException, 處在TIME_WAITING 狀態被 interrupt, 會喚醒線程進入 RUNNABLE, 並執行捕獲異常的代碼。
* join
start() 是異步的, 如果線程 A 調用了其他線程的 start() 是最後一行代碼, 那麼線程 A 執行完這些線程的 start() 後就會自己結束, 除非我們將這些 threads join 回來。
線程 A 和 B 的狀態如下:
1. A 調用 B.join(), 則 A 進入 WAITING 直到 B 進入 TERMINATED, 然後 A 進入 RUNNABLE
2. A 調用 B.join(time...), 則 A 進入 TIME_WAITING  直到 B 進入 TERMINATED, 或是 timeout 後直接進入 RUNNABLE
#+begin_src java
    /**
     * Waits for this thread to die.
     *
     * <p> An invocation of this method behaves in exactly the same
     * way as the invocation
     *
     * <blockquote>
     * {@linkplain #join(long) join}{@code (0)}
     * </blockquote>
     *
     * @throws  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown.
     */
    public final void join() throws InterruptedException {
        join(0);
    }
    /**
     * Waits at most {@code millis} milliseconds for this thread to
     * die. A timeout of {@code 0} means to wait forever.
     *
     * <p> This implementation uses a loop of {@code this.wait} calls
     * conditioned on {@code this.isAlive}. As a thread terminates the
     * {@code this.notifyAll} method is invoked. It is recommended that
     * applications not use {@code wait}, {@code notify}, or
     * {@code notifyAll} on {@code Thread} instances.
     *
     * @param  millis
     *         the time to wait in milliseconds
     *
     * @throws  IllegalArgumentException
     *          if the value of {@code millis} is negative
     *
     * @throws  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          <i>interrupted status</i> of the current thread is
     *          cleared when this exception is thrown.
     */
    public final synchronized void join(long millis) throws InterruptedException {
        long base = System.currentTimeMillis();
        long now = 0;

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (millis == 0) {
            while (isAlive()) {
                wait(0);
            }
        } else {
            while (isAlive()) {
                long delay = millis - now;
                if (delay <= 0) {
                    break;
                }
                wait(delay);
                now = System.currentTimeMillis() - base;
            }
        }
    }
#+end_src

注意, join 的 lock 對象是 this, 是被 join 的 Thread, 也就是說這裡的 join 機制也是靠管程和 Wait-Notify 機制實現的: 如果 A 調用了 B 的 join, 則 A 進入 B 的 WaitSet 中等待 notify, 但是 join 中並沒有 notify 或 notifyAll, 它是被 isAlive() 判斷後調用的, 請仔細看 document: /As a thread terminates the {@code this.notifyAll} method is invoked. It is recommended that applications not use {@code wait}, {@code notify}, or {@code notifyAll} on {@code Thread} instances./ 這是為了避免我們搞混到底 wait, notify 是 Object 的方法還是 Thread 的方法。
* yield
當我們執行 Thread.yield(), 則該線程會讓出 CPU 分配的時間片, 但是線程的狀態仍然處於 RUNNABLE 狀態:
#+begin_src java
    /**
     * A hint to the scheduler that the current thread is willing to yield
     * its current use of a processor. The scheduler is free to ignore this
     * hint.
     *
     * <p> Yield is a heuristic attempt to improve relative progression
     * between threads that would otherwise over-utilise a CPU. Its use
     * should be combined with detailed profiling and benchmarking to
     * ensure that it actually has the desired effect.
     *
     * <p> It is rarely appropriate to use this method. It may be useful
     * for debugging or testing purposes, where it may help to reproduce
     * bugs due to race conditions. It may also be useful when designing
     * concurrency control constructs such as the ones in the
     * {@link java.util.concurrent.locks} package.
     */
    public static native void yield();
#+end_src
document 有提到, 這是非常適合用來 debugging race conditions 的方法, 因為有可能讓出 CPU 時間片可以揭露線程切換導致的原子性問題。
