#+TITLE: 可中斷鎖與死鎖檢測

* 可中斷鎖
JUC 的 Lock interface 中, 有以下兩個方法可用於中斷:
1. lockInterruptibly()
   可中斷上鎖的過程中會處理 Thread.interrupt() 發出的中斷信號, 如果收到中斷信號就會觸發 InterruptException 異常
2. tryLock(long timeout, TimeUnit unit)
   嘗試上鎖的過程中, 如果在等待時間收到中斷信號就會觸發 InterruptException 異常

以下為測試的 data, 注意第一個 catch {...}, 上鎖失敗就 return 退出:
#+begin_src java
class SyncData {
    public static int value = 0;
    public static void lockInterruptiblyUpdate(Lock lock) {
        Thread t = currentThread();
        System.out.println(t.getName() + " start locking...");
        try {
            lock.lockInterruptibly();
        } catch (InterruptedException e) {
            // 上鎖失敗就退出
            System.out.println(t.getName() + " was interrupted, lock faild.");
            e.printStackTrace();
            return;
        }
        try {
            System.out.println(t.getName() + " lock succesfully! Get into the critical section.");
            try {
                sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            value ++;
            if (Thread.currentThread().isInterrupted()) {
                System.out.println(t.getName() + " was interrupted in execution.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
}
#+end_src

測試的 code:
#+begin_src java
public class InterruptableLockDemo {
    public static void main(String[] args) {
        Lock lock = new ReentrantLock();
        Runnable task = () -> SyncData.lockInterruptiblyUpdate(lock);
        Thread t1 = new Thread(task, "T1");
        Thread t2 = new Thread(task, "T2");

        t1.start();
        t2.start();
        try {
            sleep(500);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        t1.interrupt();
        t2.interrupt();

        try {
            sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("result: " + SyncData.value);
    }
}
#+end_src

執行結果:
T1 start locking...
T2 start locking...
T1 lock succesfully! Get into the critical section.
T2 was interrupted, lock faild.

java.lang.InterruptedException: sleep interrupted
	at java.lang.Thread.sleep(Native Method)
	at explicitlock.SyncData.lockInterruptiblyUpdate(InterruptableLockDemo.java:51)
	at explicitlock.InterruptableLockDemo.lambda$main$0(InterruptableLockDemo.java:12)
	at java.lang.Thread.run(Thread.java:748)
java.lang.InterruptedException
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:898)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1222)
	at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)
	at explicitlock.SyncData.lockInterruptiblyUpdate(InterruptableLockDemo.java:42)
	at explicitlock.InterruptableLockDemo.lambda$main$0(InterruptableLockDemo.java:12)
	at java.lang.Thread.run(Thread.java:748)

result: 1

* 死鎖檢測
JDK 1.8 的 ThreadMXBean 提供多種監視 Thread 的方法, 其中兩個有關 deadlock 的方法如下:
1. findDeadlockedThreads
   用於檢測 JUC 的 Lock 和 Java 的隱式鎖引起的 deadlock
2. findMonitorDeadlockedThreads
   只用於檢測 Java 的隱式鎖引起的 deadlock

JVM 的 ManagementFactory 以靜態工廠方法的方式提供有關監聽 JVM 運行信息的 Beam 實例, 它同時運許對 local 運行的 JVM 和在 remote 運行的 JVM, 以下是以 ManagementFactory 獲取 ThreadMXBean instance:
#+begin_src java
public static final ThreadMXBean threadMXbean = ManagementFactory.getThreadMXBean();
#+end_src


以下我們示範 deadlock detection 的過程, 首先建立一個需要兩個 lock 的任務:
#+begin_src java
    private static class Demo {
        static void twoLocksTask(Lock lock1, Lock lock2) {
            Thread t = Thread.currentThread();

            String lock1Name = lock1.toString().replace("java.util.concurrent.locks.", "");
            String lock2Name = lock1.toString().replace("java.util.concurrent.locks.", "");

            System.out.println(t.getName() + " start locking the first lock:" + lock1Name);
            try {
                lock1.lockInterruptibly();
            } catch (InterruptedException e) {
                System.out.println(t.getName() + " was interrupted, " + "lock " + lock1Name + " faild.");
                e.printStackTrace();
            }
            try {
                System.out.println(t.getName() + " lock " + lock1Name + "successfully.");
                System.out.println(t.getName() + " start locking the second lock:" + lock2Name);
                try {
                    lock2.lockInterruptibly();
                } catch (InterruptedException e) {
                    System.out.println(t.getName() + " was interrupted, " + "lock " + lock2Name + " faild.");
                    e.printStackTrace();
                    return;
                }
                try {
                    System.out.println(t.getName() + " lock " + lock2Name + "successfully.");
                    sleep(1000);
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    lock2.unlock();
                    System.out.println(t.getName() + " release the lock: " + lock2Name);
                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                lock1.unlock();
                System.out.println(t.getName() + " release the lock: " + lock1Name);
            }
        }
    }
#+end_src

測試過程:
1. 我們讓兩個線程各自先佔有一個 lock, 然後嘗試獲取對方佔有的 lock
2. 檢測 deadlock, report thread info
3. interrupt 其中一個線程, 釋放其中一把鎖
4. 另一個線程會成功上鎖
#+begin_src java
    public static void main(String[] args) throws InterruptedException {
        Lock lock1 = new ReentrantLock();
        Lock lock2 = new ReentrantLock();
        Runnable task1 = () -> Demo.twoLocksTask(lock1, lock2);
        Runnable task2 = () -> Demo.twoLocksTask(lock2, lock1);

        Thread t1 = new Thread(task1, "T1");
        Thread t2 = new Thread(task2, "T2");

        t1.start();
        t2.start();

        sleep(2000);
        long[] deadlockedThreads = threadMXBean.findDeadlockedThreads();
        if (deadlockedThreads.length > 0) {
            System.out.println("Deadlock detected, report the info:");
            for (long pid : deadlockedThreads) {
                ThreadInfo info = threadMXBean.getThreadInfo(pid, Integer.MAX_VALUE);
                System.out.println(info);
            }
            System.out.println("Interrupt a thread to solve the deadlock.");
            t1.interrupt();
        }
    }
#+end_src
結果如下:
1. 我們讓兩個線程各自先佔有一個 lock, 然後嘗試獲取對方佔有的 lock
   T1 start locking the first lock:ReentrantLock@2d4fe726[Unlocked]
   T2 start locking the first lock:ReentrantLock@a02a90c[Unlocked]
   T1 lock ReentrantLock@2d4fe726[Unlocked]successfully.
   T2 lock ReentrantLock@a02a90c[Unlocked]successfully.

   T1 start locking the second lock:ReentrantLock@2d4fe726[Unlocked]
   T2 start locking the second lock:ReentrantLock@a02a90c[Unlocked]

2. 檢測 deadlock, report thread info
   Deadlock detected, report the info:
   "T1" Id=11 WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@448139f0 owned by "T2" Id=12
        at sun.misc.Unsafe.park(Native Method)
        -  waiting on java.util.concurrent.locks.ReentrantLock$NonfairSync@448139f0
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:897)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1222)
        at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)
        at explicitlock.ThreadDeadlockedDemo$Demo.twoLocksTask(ThreadDeadlockedDemo.java:56)
        at explicitlock.ThreadDeadlockedDemo.lambda$main$0(ThreadDeadlockedDemo.java:17)
        ...
   "T2" Id=12 WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@214c265e owned by "T1" Id=11
       at sun.misc.Unsafe.park(Native Method)
       -  waiting on java.util.concurrent.locks.ReentrantLock$NonfairSync@214c265e
       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
       at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:897)
       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1222)
       at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)
       at explicitlock.ThreadDeadlockedDemo$Demo.twoLocksTask(ThreadDeadlockedDemo.java:56)
       at explicitlock.ThreadDeadlockedDemo.lambda$main$1(ThreadDeadlockedDemo.java:18)
       ...
3. interrupt 其中一個線程, 釋放其中一把鎖
   Interrupt a thread to solve the deadlock.
     T1 was interrupted, lock ReentrantLock@2d4fe726[Unlocked] faild.
     T1 release the lock: ReentrantLock@2d4fe726[Unlocked]
4. 另一個線程會成功上鎖
   T2 lock ReentrantLock@a02a90c[Unlocked]successfully.
