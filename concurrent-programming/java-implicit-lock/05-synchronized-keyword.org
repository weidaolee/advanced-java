#+TITLE: synchronized Keyword
synchronized 關鍵字, 幾乎就等價於 Java 的 隱式鎖機制, 在 Java 代碼層面我們僅僅是使用了 synchronized 宣告要保護的資源, 而對象鎖的狀態是偏向鎖、自旋鎖、互斥鎖, 完全由 JVM 去控制。 本節我們將從語言層面來理解 synchronized 的使用方式。
* synchronized 關鍵字與原子性問題
synchronized keyword 能在一定程度上邦我們解決原子性問題。 原子性的根本問題是線程切換導致的, 當我們使用 synchronized keyword 時, 我們相當於在代碼中規劃出一個 *臨界區*, 使得 *在臨界區內僅允許一個線程在執行, 且執行過程中不切換線程, 從而保證臨界區內的操作是原子的。* 不過, 我在前面強調了 *一定程度上能解決*, 是因為要完整解決我們還需要 CAS 和原子類。

* synchronized 的使用方式
synchronized 可以修飾方法, 或是一個 code block, 以下是操作範例:
#+begin_src java
class ExclusiveLockExample {
    // 修飾非靜態方法
    synchronized void methodA() {
        // 臨界區
    }

    // 修飾靜態方法
    synchronized static void methodB() {
        // 臨界區
    }

    // 修飾 code block
    Object obj = new Object();
    public void methodC() {
        synchronized (obj) {
            // 臨界區
        }
    }
}
#+end_src
* synchronized 修飾的對象
如果 synchronized 修飾的是非靜態的方法, 則被鎖保護的對象則是對象實例本身, 代碼等價於:
#+begin_src java
class ExclusiveLockExample {
    // 修飾非靜態方法
    synchronized (this) void methodA() {
        // 臨界區
    }

#+end_src
如果 synchronized 修飾的是靜態的方法, 則被鎖保護的對象則是整個 class, 代碼等價於:
#+begin_src java
class ExclusiveLockExample {
    // 修飾非靜態方法
    synchronized (ExclusiveLockExample.class) void methodB() {
        // 臨界區
    }
#+end_src
如果 synchronized 修飾的是 code block, 則需要聲明要上鎖的資源, 如果沒有則需要自行創建一個對象。
* 用 synchronized 解決 x += 1 的問題
考慮以下代碼是否有併發問題:
#+begin_src java
class SafeAdd {
    int val = 0;
    int get () {
        return val;
    }
    synchronized void add() {
        val += 1;
    }
}
#+end_src
首先, 由於 synchronized 保護了 add, 所以在修改數據期間, 線程不會發生切換, 因此沒有原子性的問題。再來, 由於 synchronized unlock happens-before lock, 所以我們可以確定, 當我們執行 N 次 add(), 最終 val 的值一定是 N。但是, 當我們真正要透過 get() 讀取數據時, 就發生了可見性問題, 因為目前沒有任何 happens-before 的規則保護 get() 方法。如果我們要 get() 能夠看見 add() 修改, 我們必須讓 get() 也遵守  synchronized unlock happens-before lock 這條規則, 因此代碼應該如下:
#+begin_src java
class SafeAdd {
    int val = 0;
    synchronized int get () {
        return val;
    }
    synchronized void add() {
        val += 1;
    }
}
#+end_src
此時, 被保護的資源都是 this, 且讀/寫都是互相排他的且執行過程中不會切換線程, 這樣的代碼是線程安全的。
* 鎖對象與臨界區
當我們在使用 synchronized 時, 就是對某個對象上鎖, 而這個 synchronized 所規劃出的臨界區, 是相對於該上鎖對象的。 也就是說, 我們可以在不同的代碼對同一個對象上鎖, 這樣可以保證操作這些代碼時必須取得這把鎖, 如同上面的代碼。鎖對象和臨界區的關係非常重要, 我們對上述案例稍做修改, 我們將 val 改成靜態變量, 將 add 改為靜態方法, 考慮以下代碼是否有併發問題:
#+begin_src java
class SafeAdd {
    static int val = 0;
    synchronized int get () {
        return val;
    }
    synchronized static void add() {
        val += 1;
    }
}
#+end_src
我們在 get() 方法是針對 this 上鎖, 而對 add 方法是針對 SafeAdd.class 上鎖, 而在兩個方法體中, 我們都對一個 class 的 val 操作, 顯然這個 get() 是有問題的。
* 用不同的鎖對象保護無相關的不同資源
當我們對一個 Object 中的所有方法都使用 this 來上鎖時, 這樣任何對這個 Object 的操作都會被阻塞, 這樣做明顯不夠有效率; 因此, 當我們明確知道兩個臨界區在業務上是無關時, 我們可以用不同的鎖來保護, 這樣併發性就得到保障, 請考慮以下代碼:
#+begin_src java
class Account {}
private final Object balanceLock = new Object();
private final Object passwordLock = new Object();

private int balance;
private String password;

void withdrawal(int amount) {
    synchronized (balanceLock) {
        if (balance >= amount) {
            balance -= amount;
        }
    }
}

void getBalance () {
   synchronized (balanceLock) {
       return balance;
   }
}

void setPassword (String oldPassWord, String newPassword) {
    synchronized (passwordLock) {
        if (oldPassWord == password) {
            password = newPassword;
        }
    }
}
#+end_src

* 一個鎖對象保護有關係的不同資源
臨界區中, 被保護的只有臨界區上鎖的對象, 這點請銘記。 我們考慮以下代碼:
#+begin_src java
clas Account {
    private int balance;
    synchronized void transfer (Account target, int amount) {
        if (balance >= amount) {
            balance -= amount;
            target.balance += amount;
        }
    }
}
#+end_src
我們想透過對 this 上鎖來保護 transfer 操作, 但這麼做是錯的, 因為 this 只能保護自己, 當有人修改 target.balance 時是不會被阻塞的, 所以此時是存在併發安全問題的。 所以, 如果一個操作要保護兩個共享對象, 那麼他們必須使用相同的鎖。 我們可以要求在創建 Account 對象時, 要傳入一把鎖, 並用這把鎖保護 transfer():
#+begin_src java
class Account {
    private Object lock；
    private int balance;
    private Account();
    public Account(Object lock) {
        this.lock = lock;
    }
    void transfer(Account target, int amt){
        synchronized(lock) {
            if (this.balance > amt) {
                this.balance -= amt;
                target.balance += amt;
            }
        }
    }
}
#+end_src
這樣確實是安全的, 因為現在要能操作 transfer, 必須先取得這個 lock, 但是這樣做有個問題是, 創建 Account 對象的代碼可能在多個 maven 工程之中, 這樣就沒有辦法傳入相同的對象了, 因此, 解決方案應該是使用 Account.class 作為 lock:
#+begin_src java
class Account {
  private int balance;
  void transfer(Account target, int amount){
    synchronized(Account.class) {
      if (this.balance > amount) {
        this.balance -= amount;
        target.balance += amount;
      }
    }
  }
}
#+end_src
或者, 把 lock 設置為 static, 效果是一樣的, 但是兩種方式都會導致併發性低下, 因為一旦發生轉帳行為, 所有帳戶都會被上鎖, 鎖保護的對象是每個帳戶的餘額, 我們應該使用顆粒度更細的鎖來解決這個問題, 但是使用更細粒度的鎖容易產生死鎖問題, 我們在下一張先討論死鎖問題, 再來討論更好的解決方案。
