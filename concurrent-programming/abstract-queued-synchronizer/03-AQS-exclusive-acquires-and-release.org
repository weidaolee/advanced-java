#+TITLE: AQS exclusive acquires and release
以 exclusive 方式 acquires 和 release 的 template method 最主要的方法有以下:
#+begin_src java
public final void acquire(int arg);
public final void acquireInterruptibly(int arg) throws InterruptedException;
public final boolean tryAcquireNanos(int arg, long nanosTimeout) throws InterruptedException;

public final boolean release(int arg);
#+end_src

這些方法在內部會調用兩種方法, 這些方法構成完整的 template workflow:
1. 其他 template method, 由 AQS 實現, 對修改關閉
2. template hook method, 由 subclass Sync 實現, 對修改開放

由於 template hook method 由 Sync 實現, 我們在討論各種工具類實再做介紹。 在這裡我們先列出屬於這些 acquires 都可能會調用的其他 template methods:
#+begin_src java
private Node addWaiter(Node mode);
private Node enq(final Node node);
final boolean acquireQueued(final Node node, int arg);
private static boolean shouldParkAfterFailedAcquire(Node pred, Node node);
private final boolean parkAndCheckInterrupt();
#+end_src

以及, release 會調用的 template method:
#+begin_src java
private void unparkSuccessor(Node node);
#+end_src
+ [[acquire(int arg)][acquire(int arg)]]
+ [[acquireInterruptibly(int arg)][acquireInterruptibly(int arg)]]
+ [[tryAcquireNanos(int arg, long nanosTimeout)][tryAcquireNanos(int arg, long nanosTimeout)]]
+ [[release(int arg)][release(int arg)]]
* acquire(int arg)
acquire 自旋過程中, 如果收到 interrupt 信號, 會推遲到成功 tryAcquire 時才響應
#+begin_src java
    /**
     * Acquires in exclusive mode, ignoring interrupts.  Implemented
     * by invoking at least once {@link #tryAcquire},
     * returning on success.  Otherwise the thread is queued, possibly
     * repeatedly blocking and unblocking, invoking {@link
     * #tryAcquire} until success.  This method can be used
     * to implement method {@link Lock#lock}.
     *
     * @param arg the acquire argument.  This value is conveyed to
     *        {@link #tryAcquire} but is otherwise uninterpreted and
     *        can represent anything you like.
     */
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
#+end_src
執行順序如下:
- [[*tryAcquire(arg)][tryAcquire(arg)]]
- [[*addWaiter(mode)][addWaiter(mode)]]
  - [[*enq(node)][enq(node)]]
- [[*acquireQueued(node, arg)][acquireQueued(node, arg)]]
  - [[*shouldParkAfterFailedAcquire(p, node)][shouldParkAfterFailedAcquire(p, node)]]
  - [[*parkAndCheckInterrupt()][parkAndCheckInterrupt()]]
  - [[cancelAcquire(node)][cancelAcquire(node)]]
- [[*selfInterrupt()][selfInterrupt()]]  
** tryAcquire(arg)
#+begin_src java
protected boolean tryAcquire(int arg) {
    throw new UnsupportedOperationException();
}
#+end_src
=tryAcquire(arg)= 是由 =Sync= 實現的 template hook method。 在 =acquire(arg)= 實現中, 有兩種情況下會調用 =tryAcquire(arg)=:
1. 當 =acquire(arg)= 執行時, 會首先嘗試 =tryAcquire(arg)=, 如果成功則 =return true=, 代表 =acquire(arg)= 已經成功可以退出了。 由於沒有競爭發生, 所以 wait queue 不需要 insert Node, 但 =state= 會被 =tryAcquire= 改變
2. 當第一次 =tryAcquire(arg)= 失敗代表有競爭發生, thread 會被封裝到 =Node= 進入 wait queue 開始自旋, 當 thread 處於喚醒狀態時, 會首先檢查自己是否為 =head= 後第一個有效的 =node=, 如果是的話會再嘗試一次 =tryAcquire(arg)=

注意, 如果是第二種情況, 如果 =tryAcquire(arg)= 失敗則會進入 park 等待 unpark, 所以需要修改 =node.prev= 的 =waitStatus=
** addWaiter(mode)
=addWaiter= 的職責是, 當 =tryAcquire(arg)= 失敗時, 代表當前的 =Thread= 必須被封裝到 =Node= 中, 並成為 wait queue 的 =tail=
我們明確一下 =addWaiter= 的職責:
1. =addWaiter= 是必成功的 CAS 操作, 執行完成後會 return =node=, 此時 =node= 就是 wait queue 的 =tail=
2. =addWaiter= 只負責將 =node= 加入 wait queue, 至於 =node= 處在 wait queue 中, 是要執行一次 =tryAcquire= 還是進入 park ,這屬於 =acquireQueued= 的職責。
另外, 還有兩個要點:
1. wait queue 有可能沒被初始化過, 需要先執行初始化
2. 對 =head= 和 =tail= 的操作, 必須是 CAS 操作

=addWaiter=:
#+begin_src java
    /**
     * Creates and enqueues node for current thread and given mode.
     *
     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared
     * @return the new node
     */
    private Node addWaiter(Node mode) {
        Node node = new Node(Thread.currentThread(), mode);
        // Try the fast path of enq; backup to full enq on failure
        Node pred = tail;
        if (pred != null) {
            node.prev = pred;
            if (compareAndSetTail(pred, node)) {
                pred.next = node;
                return node;
            }
        }
        enq(node);
        return node;
    }

#+end_src
=addWaiter= 的邏輯如下:
1. 首先將要進入 wait queue 的 =Node= 準備好
   準備一個 =Node= =node=, 將當前 =Thread= 封裝到 =node= 中, 作為準備成為 wait queue 的 =tail= 的 =node=
2. 確認 wait queue 是否存在: 檢查 =head= 是否需要被初始化
   * 先確定檢查的邏輯是否正確: =head= 和 =tail=, 要麼同時為 =null=, 要麼同時不為 =null=, 所以檢查 =pred= 等於檢查 =tail=, 也等於檢查 =head=
   * 如果 =head= 需要被初始化, 則直接交給 =enq(node)= 執行初始化
3. 如果 wait queue 存在, 將 =node= 替換成 =tail=
   * 對 =tail= 嘗試一次 CAS 操作以替換 =tail=, 如果成功, =return node= (也就是 =tail=)
   * CAS 操作失敗, 說明有其他 =node= 也在嘗試 CAS 替換 =tail=, 此時將 =addWaiter= 的職責移交給 =enq(node)=

注意, =addWaiter= 的邏輯理論就是要完成雙向的 =LinkedList= 的 =insert(node)=:
1. 在確認 =wait queue= 存在後, 將 =node.prev= 指向 =tail=
2. 以 CAS 操作, 將 =node= 替換成 =tail=, 在 CAS 操作成功的前提下, 將 =pred.next= 指向 =node=
這兩步就是 =addWaiter= 中的兩個 =if= 判斷, 如果都成功完成, 就可以直接 =return node= 並離開 =addWaiter=; 如果其中一步失敗, 都需要將 =addWaiter= 的職責移交給 =enq(node)=
*** enq(node)
=enq(node)= 的職責是, 在 =addWaiter= 直接將 =node= =insert= 進 =wait queue= 中失敗時, 接管 =addWaiter= 的職責, 以 CAS 的方式 =insert= =node= 直到成功為止, 是必成功的 CAS 自旋函數。
會進入 =enq= 函數有兩種可能:
1. wait queue 不存在
   注意, 此時 =node.prev= 指向 =null=, 但 =node.prev= 應該指向 =head=, 且 =head.next= 應該指向 =node=
2. wait queue 存在, 但有其他 =Node= 也在嘗試 =insert= 而發生競爭導致
   注意, 此時 =node.prev= 已經指向的是一個過期的 =tail=, 並且當前的 =tail.next= 也沒有指向 =node=

簡單來說, =enq= 要做的事情就是確保 =node.prev= 和 =tail.next= 都指向正確的 =Node=

我們先考慮第二種情況, 也就是 wait queue 已經存在的情況, 處理邏輯是: 以 CAS 自旋的方式將 =node.prev= 指向正確的 =Node=, 並將 =Node.next= 指向自身:
1. 每次進入 while loop 時, 獲取 =tail= 的最新狀態
2. 先將 =node.prev= 指向最新的 =tail=
3. 以 CAS 的方式嘗試將 =tail= 替換成 =node=
4. 如果 CAS 操作成功, 則在 CAS 的保護下將 =tail.next= 指向 =node= 並離開; 如果失敗進入下一輪 while loop 重試

而針對第一種情況, 就是先初始化 wait queue:
1. 以 CAS 的方式 create =head=
2. 在 CAS 的保護下, 將 =tail= 指向 =head=
3. 最後, 離開此 while loop, =node= 在下一次循環嘗試 =insert=, 進入情況二
#+begin_src java
    /**
     * Inserts node into queue, initializing if necessary. See picture above.
     * @param node the node to insert
     * @return node's predecessor
     */
    private Node enq(final Node node) {
        for (;;) {
            Node t = tail;
            if (t == null) { // Must initialize
                if (compareAndSetHead(new Node()))
                    tail = head;
            } else {
                node.prev = t;
                if (compareAndSetTail(t, node)) {
                    t.next = node;
                    return t;
                }
            }
        }
    }

#+end_src
注意 =enq(node)= 的 =return= 是最新、剛剛過期的 =tail=, 也就是 =node.prev=:
 * 當 =compareAndSetTail(t, node)= 成功時, 是將 =tail= 替換成 =node=, 而此時 =t= 依然指向的是過期的 =tail=
 * 注意 =addWaiter= 調用 =enq(node)= 時, 沒有以任何 variable 接收 =enq(node)= 的 =return=
** acquireQueued(node, arg)
=acquireQueued= 是一種自旋, 是 =node= 進入 wait queue 後, 真正進入 *等待* 的函數。 這個 *等待* 策略是: 只要 =node= 還在 wait queue 內, 首先檢查自己是否為 wait queue 中第一個有效 =node=. 如果是的話執行 ==tryAcquire(arg)=, 如果不是的話重設 =node.prev= 的 =waitStatus= 並進入 park, 重複這個過程直到 =node= 離開 wait queue。

另外, =node= 要離開 wait queue 有兩種方式:
1. 當自己為第一個有效 =node=, 並且 =tryAcquire(arg)= 成功, 透過 =setHead(node)= 將前面的 =node= 移出 wait queue
2. 當 =node= 自旋出現異常, 調用了 =cancelAcquire(arg)=, 並且發現 =node= 就是 =tail=, 將自己移出
#+begin_src java
    final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                // 如果為第一個有效 node, 執行 tryAcquire
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                // 如果不是第一個有效 node, 重設 prev 的 waitStatus, 進入 park
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
#+end_src

將當前 =node= 設置為 =head= 的方法為 =setHead(node)=:
#+begin_src java
private void setHead(Node node) {
    head = node;
    node.thread = null;
    node.prev = null;
}
#+end_src

在正式進入 park 前, 有兩件事情要做:
1. 由於要進入 park, 因此要先告知 =prev= 自己需要被 unpark, 這部份由 =shouldParkAfterFailedAcquire(p, node)= 完成
   注意, 只有 *有資格* 發送 signal 的 =prev=, 才能 unpark 自己的 =next=, 所以 =shouldParkAfterFailedAcquire= 也負責找到 *有資格* 的 =prev=
2. 告知 =prev= 後, 立刻進入 =park=, 這部份由 =parkAndCheckInterrupt()= 完成

注意 =acquireQueued(arg)= 的實現, 其中兩個 =if= 是並排的, 也就說即便自己是第一個有效 =node= 並處在喚醒的狀態, 如果 =tryAcquire= 失敗了依然會進入 park, 會將 =head= 的 =waitStatus= 改成 =SIGNAL=, 所以如果要作到類似 Java 隱式鎖的輕量級動態自旋, 要在 =tryAcquire= 中實現, 不過 JUC 的 ReentrantLock 並沒有作到動態自旋, 而是只做一次 CAS 嘗試。
*** shouldParkAfterFailedAcquire(p, node)
=shouldParkAfterFailedAcquire(p, node)= 有以下職責:
1. 確認 =prev= 是有效的 =Node=
   所謂有效的 =Node= 指的是 =waitStatus= 不能為 =CANCELLED=
2. 如果 =prev= 是失效的, 就讓 =node.prev= 指向 =pred.prev=, 重複這個過程直到找到有效的 =pred= 為止
3. 找到有效的 =pred= 後, 讓 =pred.next= 重新指向 =node=
#+begin_src java
    /**
     * Checks and updates status for a node that failed to acquire.
     * Returns true if thread should block. This is the main signal
     * control in all acquire loops.  Requires that pred == node.prev.
     *
     * @param pred node's predecessor holding status
     * @param node the node
     * @return {@code true} if thread should block
     */
    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
        int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park.
             */
            return true;
        if (ws > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
        } else {
            /*
             * waitStatus must be 0 or PROPAGATE.  Indicate that we
             * need a signal, but don't park yet.  Caller will need to
             * retry to make sure it cannot acquire before parking.
             */
            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
        }
        return false;
    }
#+end_src

*注意, 只有當 =pred.waitStatus = Node.SIGNAL= 時, 才會正常 =return true=, 並觸發 =&&= 後的 =parkAndCheckInterrupt= 進入 park; 反之, 無論還做了什麼操作, 最後一定會 =return false= 不觸發 =&&= 後的 =parkAndCheckInterrupt=, 這樣設計是為了能立刻重新進入 while loop 重新做檢查, 因為此時有可能 =p == head= 已經成立了*

另外, 只有在兩種條件都滿足的情況下 =ws= 可以為 =PROPAGATE = -3=:
1. =prev = head=
2. =prev= 處於 =SHARED= mode, 也就是 =prev.nextWaiter = SHARED=
這種情況我們在 =SHARED= mode 的篇幅討論。
*** parkAndCheckInterrupt()
#+begin_src java
    private final boolean parkAndCheckInterrupt() {
        LockSupport.park(this);
        return Thread.interrupted();
    }
#+end_src
注意 =parkAndCheckInterrupt= 裡調用的是 =LockSupport.park(this)=, 線程進入 park 後如果收到 interrupt 並會直接進入 =RUNNABLE=, 但不會自動拋出 =InterruptedException=, 而僅僅只修改 =interrupted= flag 為 true, 將拋出 =InterruptedException= 的時機 =InterruptedException= 交還給開發人員。

=parkAndCheckInterrupt()= 被調用的時機非常重要:
1. 由於在 =&&= 被調用, 因此只有在 =shouldParkAfterFailedAcquire= 成功將 =prev= 的 =waitStatus= 設為 =SIGNAL= 後, =parkAndCheckInterrupt()= 才會被執行
2. =parkAndCheckInterrupt()= 被執行後, 線程就會立刻進入 park, 被 unpark 時先檢查在 park 時是否有收到 interrupt, 如果有則將 =interrupted= 設為 =true=, 直接進入下一輪 =acquireQueued= 自旋, 完成 interrupt 的響應推遲
#+begin_src java
    final boolean acquireQueued(final Node node, int arg) {
        // boolean failed = true;
        // try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                // 失敗了
                // if (p == head && tryAcquire(arg)) {
                //     setHead(node);
                //     p.next = null; // help GC
                //     failed = false;
                //     return interrupted;
                // }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        // } finally {
        //     if (failed)
        //         cancelAcquire(node);
        // }
    }
#+end_src

也就是說, 處在 park 自旋時, 即便收到 interrupt 而被喚醒, 也不立即響應 interrupt, 只有當 =prev = head= 時, 且透過成功的 =acquireQueued= CAS 自旋後 =return interrupted= 狀態, 將響應中斷的職責交給 =acquire(arg)= 中的 =selfInterrupt()=

注意, =parkAndCheckInterrupt()= 中是透過 =Thread.interrupted()= 來 =return interrupted= 狀態, 這樣做會導致 =thread= 的 =interrupted status= 被重設:
#+begin_src java
    /**
     * Tests whether the current thread has been interrupted.  The
     * <i>interrupted status</i> of the thread is cleared by this method.  In
     * other words, if this method were to be called twice in succession, the
     * second call would return false (unless the current thread were
     * interrupted again, after the first call had cleared its interrupted
     * status and before the second call had examined it).
     *
     * <p>A thread interruption ignored because a thread was not alive
     * at the time of the interrupt will be reflected by this method
     * returning false.
     *
     * @return  <code>true</code> if the current thread has been interrupted;
     *          <code>false</code> otherwise.
     * @see #isInterrupted()
     * @revised 6.0
     */
    public static boolean interrupted() {
        return currentThread().isInterrupted(true);
    }
#+end_src
/Tests whether the current thread has been interrupted.  The interrupted status of the thread is cleared by this method./  也就是說, 如果在 park 期間即便有收到 interrupt, 調用 =Thread.interrupted()= 後 thread 的 =interrupted status= 會被重設。 這也是 =acquire(arg)= 最後要響應 interrupt 時, 要自己 interrupt 自己的原因。
*** cancelAcquire(node)
在 =acquire(arg)= 中, 自旋由 =acquireQueued= 負責。 =acquire= 雖然會推遲響應 interrupt, 但是當 =acquireQueued= 自旋有意外狀況無法繼續進行下去時, 會執行 =cancelAcquire= 。

注意, 如果執行了 =unparkSuccessor=, 後一個有效的 =node= 會在 =parkAndCheckInterrupt= 中醒過來, 然後發展將會如下:
1. 根據 interrupt checking 後的結果決定 =interrupted = true= 是否要被執行。
2. 無論 =interrupted = true= 是否要執行, 該 =node= 都會進入下一輪循環, 並且會發現 =node.prev == head= 不成立, 進入 =shouldParkAfterFailedAcquire=
3. 在 =shouldParkAfterFailedAcquire= 中, 將 =prev= 指向有效的 =node=, 也就是 =head=, 並退出此次 park 自旋
4. 再次進入 while loop 後, 發現 =node.prev == head= 成立, 開始進行 =tryAcquire= 自旋

所以, 如果以 =acquire(arg)= 方式來 acquire wait queue 的話, 基本上調用了 =cancelAcquire= 只有三種發展:
1. 由於自己是 =tail= 直接被移出
2. 由於自己的 next 會成為 =head= 第一個有效 =node=, 當它 =tryAcquire= 成功時會透過 =setHead= 將這個 =node= 移出
3. 其他情況, 繼續 park
** selfInterrupt()
我們回到最外層的 =acquire(arg)=:
#+begin_src java
    /**
     * Acquires in exclusive mode, ignoring interrupts.  Implemented
     * by invoking at least once {@link #tryAcquire},
     * returning on success.  Otherwise the thread is queued, possibly
     * repeatedly blocking and unblocking, invoking {@link
     * #tryAcquire} until success.  This method can be used
     * to implement method {@link Lock#lock}.
     *
     * @param arg the acquire argument.  This value is conveyed to
     *        {@link #tryAcquire} but is otherwise uninterpreted and
     *        can represent anything you like.
     */
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
#+end_src
這裡要在次強調, =acquire= 不響應 interrupt 是指在 wait queue park 的線程如果收到 interrupt 進入 =RUNNABLE= 後不立即拋出 =InterruptedException=, 而是透過 =interrupted = true= 來紀錄曾經被 interrupt, 然後進入下一輪 =acquireQueued= 自旋, 如果 =p == head= 不成立, 該線程會繼續 park 自旋; 也就是只要 =node= 沒有來到 =head.next=, 都不會響應 interrupt; 直到當 =p == head= 成立時, 透過成功的 =acquireQueued= CAS 自旋 =return interrupted= 狀態, 將響應 interrupt 的職責交給 =acquire(arg)= 中的 =selfInterrupt()=

而 =selfInterrupt()= 執行的自己 interrupt 自己:
#+begin_src java
    /**
     * Convenience method to interrupt current thread.
     */
    static void selfInterrupt() {
        Thread.currentThread().interrupt();
    }
#+end_src
這樣做相當於將 interrupt 推遲到此時響應, 此時 =thread= 才能去執行 =catch (InterruptedException) {...}=
* acquireInterruptibly(int arg)
=acquireInterruptibly= 自旋中如果被 interrupt 喚醒, 會 *直接響應 interrupt*, 而不是推遲到成功 acquire 才做響應。
#+begin_src java
    /**
     * Acquires in exclusive mode, aborting if interrupted.
     * Implemented by first checking interrupt status, then invoking
     * at least once {@link #tryAcquire}, returning on
     * success.  Otherwise the thread is queued, possibly repeatedly
     * blocking and unblocking, invoking {@link #tryAcquire}
     * until success or the thread is interrupted.  This method can be
     * used to implement method {@link Lock#lockInterruptibly}.
     *
     * @param arg the acquire argument.  This value is conveyed to
     *        {@link #tryAcquire} but is otherwise uninterpreted and
     *        can represent anything you like.
     * @throws InterruptedException if the current thread is interrupted
     */
    public final void acquireInterruptibly(int arg) throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        if (!tryAcquire(arg))
            doAcquireInterruptibly(arg);
    }
#+end_src
=acquireInterruptibly= 執行後:
1. 會先執行一次 interrupt checking
2. 以 tryAcquire(arg) 嘗試一次 acquire
3. tryAcquire(arg) 不成功, 則執行 =doAcquireInterruptibly(arg)= 進入自旋
** doAcquireInterruptibly(arg)
當 =doAcquireInterruptibly= 被調用, 通樣說明前一步調用 =tryAcquire= 因有競爭發生而失敗, 當前 thread 要封裝成 =Node= 進入 await queue 中自旋, 實現邏輯如下:
1. 調用 =addWaiter=, 完成 wait queue 的 insert =Node=
2. 實現與 =acquireQueued= 類似的自旋邏輯, 區別在於 park 自旋時對 interrupt 檢查後的處裡方式

#+begin_src java
    /**
     * Acquires in exclusive interruptible mode.
     * @param arg the acquire argument
     */
    private void doAcquireInterruptibly(int arg) throws InterruptedException {
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
#+end_src
實際上, =doAcquireInterruptibly(arg)= 就是 =acquireQueued(addWaiter(Node.EXCLUSIVE), arg))= 的立即響應異常的版本, 真正有差別的地方在於: =acquireQueued= 進入 park 自旋時, 如果被 interrupt 喚醒, 會以 =interrupted = true= 紀錄曾經被 interrupt, 然後立刻進入下一輪 =acquireQueued= 自旋; 而 =doAcquireInterruptibly= 自旋的處裡方式則是立刻拋出 =InterruptedException= 。

也就是說, 當以 =acquireInterruptibly= 的方式 acquire, 如果被 interrupt 會立刻從 acquire 中脫離, 進入對 interrupt 的處理, 可見這種方式能夠有更好的併發性能。
*** cancelAcquire(node)
與 =acquire(arg)= 不同, =acquireInterruptibly= 如果因為 interrupt 被喚醒會立即響應 interrupt, 也就是立即 =throw new InterruptedException()=, 且由 =finally= 的作用,
會立刻執行 =cancelAcquire(node)=
* tryAcquireNanos(int arg, long nanosTimeout)
=tryAcquireNanos= 有兩個特點:
1. 是帶有 timeout 機制的 acquire 自旋
2. 是一種 try acquire 版本的實現, 調用職責由 subclass 進行委派

=tryAcquireNanos= 與 =tryAcquire= 真正的區別在於, 調用 =tryAcquireNanos= 有可能涉及對 wait queue 的操作; 而 =tryAcquire= 的實現沒有辦法操作到 wait queue, 因為所有其他可以操作 wait queue 的方法都被 private 保護了。

雖然 =tryAcquireNanos= 的調用職責屬於 subclass, 但是它依然屬於 template method, 這是由於 =tryAcquireNanos= 的 =doAcquireNanos= 實現只依賴兩種方法:
1. 其他 template methods
2. =tryAcquire=, 而它是一種 template hook method

所以, =tryAcquireNanos= 從實現的角度來說, 與其他 template method 相同, 只是調用屬於 subclass 的職責。

#+begin_src java
    /**
     * Attempts to acquire in exclusive mode, aborting if interrupted,
     * and failing if the given timeout elapses.  Implemented by first
     * checking interrupt status, then invoking at least once {@link
     * #tryAcquire}, returning on success.  Otherwise, the thread is
     * queued, possibly repeatedly blocking and unblocking, invoking
     * {@link #tryAcquire} until success or the thread is interrupted
     * or the timeout elapses.  This method can be used to implement
     * method {@link Lock#tryLock(long, TimeUnit)}.
     *
     * @param arg the acquire argument.  This value is conveyed to
     *        {@link #tryAcquire} but is otherwise uninterpreted and
     *        can represent anything you like.
     * @param nanosTimeout the maximum number of nanoseconds to wait
     * @return {@code true} if acquired; {@code false} if timed out
     * @throws InterruptedException if the current thread is interrupted
     */
    public final boolean tryAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        return tryAcquire(arg) ||
            doAcquireNanos(arg, nanosTimeout);
    }
#+end_src
可以發現, =tryAcquireNanos= 的實現結構與 =acquireInterruptibly= 很相似, 但是有幾點需要格外注意:
1. =tryAcquireNanos= 會 return =boolean=, 而 =acquireInterruptibly= 是 =void= 的, 並沒有 return 任何東西
2. =tryAcquireNanos= 的自旋邏輯是由 =doAcquireNanos= 實現, 與 =doAcquireInterruptibly= 類似, 但是 =doAcquireNanos= 同樣會 return =boolean=

這是因為, =tryAcquireNanos= 是一種 try acquire 版本, 所以必須 return 一個 =boolean= 來表明 try acquire 是否成功
** doAcquireNanos(int arg, long nanosTimeout)
=doAcquireNanos= 負責 =tryAcquireNanos= 真正的自旋邏輯, 最主要的區別是, 在進入 =doAcquireNanos= 時會先紀錄一個 =deadline=; 當以 park 自旋時, 會以 =deadline= update =timeoutNanos=, 並進入 park, 這種 park 是帶有超時的 =parkNanos=, 這樣當 thread 被喚醒時有三種可能:
1. 被正常 unpark, 沒有被 interrupt, 進入下一輪 =doAcquireNanos= 自旋
2. =timeoutNanos= 還沒到, 但被 interrupt, 此時拋出 =InterruptedException=
3. 沒有被 interrupt 但是 =timeoutNanos= 耗盡, 此時也拋出 =InterruptedException=

另外要注意, =doAcquireInterruptibly= 的 =shouldParkAfterFailedAcquire= 執行完後, 會先確認 =timeoutNanos= 是否大於 =spinForTimeoutThreshold=, 這是一個 AQS 的 static 成員:
#+begin_src java
    /**
     * The number of nanoseconds for which it is faster to spin
     * rather than to use timed park. A rough estimate suffices
     * to improve responsiveness with very short timeouts.
     */
    static final long spinForTimeoutThreshold = 1000L;
#+end_src

也就是說, =timeoutNanos= 如果少於 1 秒, 會直接 =return false= 進入下一輪自旋, 而不是進入 park, 接下來 =doAcquireNanos= 自旋有兩種發展可能:
1. =p == head= 成立, 執行一次 =tryAcquire=, 由 =tryAcquire= 決定 =tryAcquireNanos= 最終的成敗
2. =p == head= 始終都不成立, =timeoutNanos= 耗盡, 退出 =doAcquireNanos= 自旋並 =return false=, =tryAcquireNanos= 也隨之失敗

這樣的設計很好理解, 也就是當 =timeoutNanos= 已經所剩不多時, 就沒必要進行 park 的自旋。
以下是 =doAcquireNanos= 的實現:
#+begin_src java
    /**
     * Acquires in exclusive timed mode.
     *
     * @param arg the acquire argument
     * @param nanosTimeout max wait time
     * @return {@code true} if acquired
     */
    private boolean doAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (nanosTimeout <= 0L)
            return false;
        final long deadline = System.nanoTime() + nanosTimeout;
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return true;
                }
                nanosTimeout = deadline - System.nanoTime();
                if (nanosTimeout <= 0L)
                    return false;
                if (shouldParkAfterFailedAcquire(p, node) &&
                    nanosTimeout > spinForTimeoutThreshold)
                    LockSupport.parkNanos(this, nanosTimeout);
                if (Thread.interrupted())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
#+end_src
*** parkNanos
=acquireQueued= 和 =doAcquireInterruptibly= 的 park 自旋都是依賴 =parkAndCheckInterrupt=; 而 =doAcquireNanos= 則是直接在這裡以 =LockSupport.parkNanos= 來實現帶有 timeout 的 park 自旋。 不過要注意, =parkNanos= 過程中如果有被 interrupt, 同樣是只會修改 interrupted status 的重設, 所以如果進入 parkNanos 自旋, 立刻響應 interrupt 的流程如下:
1. 由於收到 interrupt, 在 =LockSupport.parkNanos(this, nanosTimeout);= 這一行醒來, 此時 interrupted status 為 =true=
2. 由於 =if (Thread.interrupted())= 與上一個 =if(...)= 是兩個獨立的判斷, 所以如果有收到 interrupt 可以立即響應
*** cancelAcquire(node)
=tryAcquireNanos= 的 =cancelAcquire= 與 =acquireInterruptibly= 的完全相同。
* release(int arg)
當 thread 執行 =release(arg)= 時, 以下條件是成立的:
1. 當前 thread 已經成功 acquire, 是 wait queue 的 owner
2. 當前 =tryAcquire= 操作成功, 因此對 =state= 的修改是由 owner 完成的, 在 release 被執行前, 只有 owner 知道如何撤銷這個 update
3. 當前可能有其他 thread 或是 =node= 也同時在 =tryAcquire= 自旋, 但由於他們都不是 owner, 因此處在 =tryAcquire= 自旋
4. 要執行 release(arg) 時, 代表 owner 對臨界資源的操作已經結束, owner 準備讓出所有權
#+begin_src java
    /**
     * Releases in exclusive mode.  Implemented by unblocking one or
     * more threads if {@link #tryRelease} returns true.
     * This method can be used to implement method {@link Lock#unlock}.
     *
     * @param arg the release argument.  This value is conveyed to
     *        {@link #tryRelease} but is otherwise uninterpreted and
     *        can represent anything you like.
     * @return the value returned from {@link #tryRelease}
     */
    public final boolean release(int arg) {
        if (tryRelease(arg)) {
            Node h = head;
            if (h != null && h.waitStatus != 0)
                unparkSuccessor(h);
            return true;
        }
        return false;
    }
#+end_src
注意, 雖然 =release(arg)= 實現非常簡潔, 但是有相當多的細節:
 * =tryRelease(arg)= 負責 =tryAcquire(arg)= 的撤銷, 也只涉及對 =tryAcquire(arg)= 的撤銷, 不涉及對 wait queue 的維護
 * =tryRelease(arg)= 如果 return =true=, 代表 =state= 將回到最初使的值, 但不代表 wait queue 中沒有 =node= 在等待, 更不代表這些 =node= 不是處在 park 自旋等待

理論上我們可以將 =tryRelease(arg)= 和 =release(arg)= 做以下職責劃分:
 * =tryRelease(arg)= 負責 =tryAcquire(arg)= 的撤銷操作, 操作完畢後只要 =state= 回到最初使狀態, 則 return =true=
 * =release(arg)= 無論如何會執行一次 =tryRelease(arg)= 對 =state= 進行撤銷, 如果 =state= 回到初始狀態, 代表可以 =unparkSuccessor(h)= 推一下 wait queue, 喚醒 =successor=

注意, 當 =tryRelease(arg)= return =true= 時, 才需要嘗試 =unparkSuccessor(h)= 推動一下 wait queue 喚醒 =successor=; 這一句話等價於: 當 =tryRelease(arg)= return =false= 時, 不需要嘗試 =unparkSuccessor(h)=, 也就是說 =tryRelease= 的實現相當關鍵, 如果 =tryRelease(arg)= 要 return =false=, 必須確保 =h.waitStatus= 等於 =0=, 且 =head= 的第一個有效的 =node= 必須處在 =tryAcquire= 自旋才行。
* exclusive acquires 和 release 的總結
總結來說, exclusive acquires 有以下特點:
 * 在進入 wait queue 前, 首先執行一次 =tryAcquire=
 * 如果已經在 wait queue 內被 unpark, 只有自己是第一個有效的 =node= 時, 嘗試一次 =tryAcquire=, 如果失敗就繼續 park
 * 三種 acquires 最主要的區別在於 interrupt 是否推遲響應, 以及推遲響應的實現上
** acquaint(arg) 的風格問題
有趣的事情是, =acquireInterruptibly= 和 =tryAcquireNanos= 的自旋函數都以 =do...= 開頭, 並且包含了 =acquire(arg)= 中 =addWaiter(node)= 和自旋的責任, 這使 =acquire(arg)= 的風格與結構與其他兩種版本不大相同, 我們可以做以下改寫:
1. 將 =acquireQueued= 與 =addWaiter= 整合成 =doAcquireDeferInterruption=
#+begin_src java
    private boolean doAcquireDeferInterruption(int arg) {
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        boolean interrupted = false;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
#+end_src
2. 改寫 =acquire(arg)=
#+begin_src java
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            doAcquireDeferInterruption(arg))
            selfInterrupt();
    }
#+end_src
** tryAcquire 和 tryRelease 的職責
注意, =tryAcquire= 和 =tryRelease= 只負責不涉及 wait queue 維護的部份, 也就是只對 =state= 的修改與撤銷, 而兩種方法都會 return =boolean= 讓後續的方法接手 wait queue 的維護, 比如說在各種版本的 acquires 實現, 都首先嘗試了一次 =tryAcquire=, 如果失敗了則需要操作 =insert(node)=, 而 =release(arg)= 則要負責在 =tryRelease(arg)= return =false= 時, 進行是否需要 unpark =head= 的判斷。 不過由於 AQS 將涉及 wait queue 維護的方法都 private 了, 所以 =tryAcquire= 和 =tryRelease= 的實現都碰不到 wait queue, 從設計上確保了 AQS 的安全。
** wait queue 的正常工作
注意, 由於 default 的 =waitStatus= 就是 =0=, 並且只被後面到來的 =node= 執行 =shouldParkAfterFailedAcquire= 能將 =waitStatus= 改為 =SIGNAL=, 且只有 =release(arg)= 和 =cancelAcquire(node)= 中有調用 =unparkSuccessor(node)= 能將 =successor= unpark 喚醒, 此時 =waitStatus= 才可能再次被改為 =0=, 並且只要涉及跨越 =node= 的行為, 都會確保 =CANCELLED= 的 =node= 被跳過、 =node.prev= 以及 =node.next= 的有效性, 從而確保了整個 wait queue 能透過檢查 =waitStatus= 而正常工作:
1. 每個在 wait queue 的 =node= 大多處在 park 自旋
2. 當 =waitStatus = 0=, 一定確保 =successor= 被 unpark
3. 當 =node= 要進入 park, 一定確保 =predecessor= 的 =waitStatus= 為 =SIGNAL=
4. 當 =node= 在 wait queue 中自旋, 但意外中止時, 必定執行 =cancelAcquire= 將 =node= 標記為 =CANCELLED=
