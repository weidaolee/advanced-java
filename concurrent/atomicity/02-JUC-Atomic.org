#+TITLE: JUC 原子類
JUC Atomic 類是使用 Unsafe 類的 CAS API 的安全封裝, 它提供的操作不但是原子的, 也是線程安全的。在多線程併發環境下, 如果臨界區滿足以下條件, 不建議採用 synchronized 來解決, 而是建議優先使用 JUC 原子類:
1. 臨界區執行時間很短
2. 對臨界資源讀多寫少的場景

* Atomic 和 Mutex 性能對比
Mutex 的方案:
#+begin_src java
    private static class MutexDemo{
        public int value = 0;
        public static void demo() throws InterruptedException {
            final ExecutorService pool = Executors.newCachedThreadPool();
            final CountDownLatch latchW = new CountDownLatch(10000);
            final CountDownLatch latchR = new CountDownLatch(10);
            MutexDemo demo = new MutexDemo();
            long start = System.currentTimeMillis();
            for (int i = 1; i <= 10000; i++) {
                pool.submit(() -> {
                    demo.selfIncrement();
                    latchW.countDown();
                });
                if (i % 1000 == 0) {
                    pool.submit(() -> {
                        demo.get();
                        latchR.countDown();
                    });
                }
            }
            pool.shutdown();
            latchW.await();
            latchR.await();
            float time = (System.currentTimeMillis() - start) / 1000F;
            System.out.println(demo.get());
            System.out.println("execution time: " + time);
        }
        public synchronized void selfIncrement() {
            try {
                sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            value++;
        }
        public synchronized int get(){
            try {
                sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return value;
        }
    }
#+end_src

Atomic 的方案:
#+begin_src java
    private static class AtomicDemo{
        final AtomicInteger atomicInteger = new AtomicInteger(0);
        public static void demo() throws InterruptedException {
            final ExecutorService pool = Executors.newCachedThreadPool();
            final CountDownLatch latchW = new CountDownLatch(10000);
            final CountDownLatch latchR = new CountDownLatch(10);
            AtomicDemo demo = new AtomicDemo();
            long start = System.currentTimeMillis();
            for (int i = 1; i <= 10000; i++) {
                pool.submit(() -> {
                    demo.selfIncrement();
                    latchW.countDown();
                });
                if (i % 1000 == 0) {
                    pool.submit(() -> {
                        demo.get();
                        latchR.countDown();
                    });
                }
            }
            pool.shutdown();
            latchW.await();
            latchR.await();
            float time = (System.currentTimeMillis() - start) / 1000F;
            System.out.println(demo.get());
            System.out.println("execution time: " + time);
        }
        public void selfIncrement(){
            try {
                sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            atomicInteger.getAndIncrement();
        }
        public int get(){
            try {
                sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return atomicInteger.get();
        }
    }
#+end_src
執行結果為:
MutexDemo 花費了 105.548 秒
AtomicDemo 花費了 0.258 秒

差距如此大是因為我們使用 CachedThreadPool 並提交了 10010 個任務, 雖然這些任務都有耗費時間, 但是對 AtomicDemo 的方案來說, 10010 個線程全都是不阻塞的, 但是 MutexDemo 是被阻塞的, 性能差距達兩個數量級。
另外, 很重要的一點, 我們在 get() 方法中 sleep 了 100 毫秒, 由於 Mutex 是悲觀的, 即便是 read 操作也阻塞了其他線程的讀寫, 但 Atomic 本身就是 lock-free 的方案, get() 雖然有耗時, 但數據不會發生改變, 其他線程嘗試讀寫會 CAS 成功。

但就算單純只比較寫的場景, 性能差距也能達到兩個數量級:
MutexDemo 花費了 102.591 秒
AtomicDemo 花費了 0.238 秒

這說明了, 只要臨界區的執行時間很短且大併發的場景, 即便是寫多讀少的場合, CAS 自旋的代價遠小於阻塞喚醒導致的大量上下文切換的代價。
* JUC 原子類概覽
[[https://static001.geekbang.org/resource/image/00/4a/007a32583fbf519469462fe61805eb4a.png]]

Java 將不安全的 CAS 操作封裝在 Unsafe 類中, 對外提供安全的 JUC 原子類來保證原子性, 原子類可以分為兩類:
1. 基礎類型, 包含基礎數據類型與基礎結構類型
2. 引用類型, 包含對象引用和對象屬性類型
這樣的劃分方式是更合理的, 因為 Java 世界中的數據類型本質上就只有這兩類。
** 基礎類型
包含三類:
 * 基礎數據類型, 包含整數、長整數、Boolean 的原子類型
 * 數組類型, 基於基礎數據類型的數組擴展
 * 累加器類型, 提供專門用於累加操作的類型, 透過 CAS 分段鎖實現熱點分離, 大併發場景下性能優於 Atomic 類型
** 引用類型
對象引用類型分為兩種:
 * 對象引用類型, 提供對對象引用的原子操作
 * 對象屬性更新器類型, 提供透過反射對對象的屬性做原子操作
* 基礎數據類型
基礎數據類型和數組類型都很相似, 這裡我們只介紹 AtomicInteger, 對於 AtomicInteger, 有提供了以下方法:
#+begin_src java

// i++, i--
getAndIncrement()
getAndDecrement()

// ++i, --i
incrementAndGet()
decrementAndGet()

// i += delta, i -= delta
getAndAdd(delta)
addAndGet(delta)

//CAS
compareAndSet(expect, update)

// 以下方法 update 值可傳入函數
getAndUpdate(func)
updateAndGet(func)
getAndAccumulate(x, func)
accumulateAndGet(x, func)
#+end_src

以下是同步操作僅對基礎類型操作, 使用基礎原子類的例子:
#+begin_src java
public class AtomicIntPlusPlusDemo {
    public static void main(String[] args) throws InterruptedException {
        CountDownLatch latch = new CountDownLatch(10);
        AtomicInteger a = new AtomicInteger(0);
        ExecutorService pool = Executors.newCachedThreadPool();
        for (int i = 0; i < 10; i++) {
            pool.submit(() -> {
                for (int j = 0; j < 1000; j++) {
                    a.getAndIncrement();
                }
                latch.countDown();
            });
        }
        latch.await();
        System.out.println("a:" + a.get());
    }
}
// a: 10000
#+end_src

AtomicInteger 實際上是透過 volatile 保證了 value 的可見性, 讓 value 下沉到內存可見, 然後再透過 CAS 來保證原子性, 解決併發安全問題:
#+begin_src java
public class AtomicInteger extends Number implements java.io.Serializable {
    private static final long serialVersionUID = 6214790243416807050L;

    private volatile int value;

    // setup to use Unsafe.compareAndSwapInt for updates
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final long valueOffset;

    static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicInteger.class.getDeclaredField("value"));
        } catch (Exception ex) { throw new Error(ex); }
    }

    /**
     * Creates a new AtomicInteger with the given initial value.
     *
     * @param initialValue the initial value
     */
    public AtomicInteger(int initialValue) {
        value = initialValue;
    }
//...
#+end_src

CAS i++:
#+begin_src java

    /**
     * Atomically updates the current value with the results of
     * applying the given function, returning the previous value. The
     * function should be side-effect-free, since it may be re-applied
     * when attempted updates fail due to contention among threads.
     *
     * @param updateFunction a side-effect-free function
     * @return the previous value
     * @since 1.8
     */
    public final int getAndUpdate(IntUnaryOperator updateFunction) {
        int prev, next;
        do {
            prev = get();
            next = updateFunction.applyAsInt(prev);
        } while (!compareAndSet(prev, next));
        return prev;
    }
#+end_src
* 引用類型
** 對象引用
基礎原子類型只能保證對一個基礎類型變量的原子性, 而當我們要保證對引用變量操作的原子性時, 就需要原子的對象引用類型和原子的變量屬性更新類型來提供對對象引用、對象屬性更新的原子性。
這裡我們先實現一個 User 對象:
#+begin_src java
class User implements Serializable {
    String uid;
    String name;
    public volatile int score;

    public User(String uid, String name, int score) {
        this.uid = uid;
        this.name = name;
        this.score = score;
    }
    @Override
    public String toString() {
        return "User{" +
            "uid='" + uid + '\'' +
            ", name='" + name + '\'' +
            ", score=" + score +
            '}';
    }
}
#+end_src

我們考慮一種場景如下:
1. 可以獲得更高的 score 的 User 是 champion
2. User 獲得分數的行為互相獨立
這樣的場景下, 僅有改變 champion 指向的 User 的部份是同步的, 其他是異步操作, 此時可以使用以下方式實現:
#+begin_src java
public class CASReferenceDemo {
    static AtomicReference<User> champion = new AtomicReference<>();
    public static void main(String[] args) {
        User userA = new User("1", "A", 80);
        User userB = new User("2", "B", 100);
        champion.set(userA);
        System.out.println(champion.get());
        champion.set(userB);
        System.out.println(champion.get());
    }
}
#+end_src
** 對象屬性更新類
如果要保證修改某個對象的屬性的行為是原子的, 需要使用對象屬性更新類:
 * AtomicIntegerFieldUpdater
 * AtomicLongFieldUpdater
 * AtomicReferenceFieldUpdater

要保障安全更新對象屬性有兩個步驟:
1. 為了保證對象屬性是內存可見的, 我們要使用 volatile 修飾
2. 透過靜態工廠方法和 reflection 機制得到 updater
3. 透過 updater 更新指定的屬性
#+begin_src java
public class CASFieldUpdaterDemo {
    static final AtomicIntegerFieldUpdater<User> userUpdater = AtomicIntegerFieldUpdater.newUpdater(User.class, "score");

    public static void main(String[] args) {
        User userA = new User("1", "A", 0);
        System.out.println(userA);
        userUpdater.getAndSet(userA, 100);
        System.out.println(userA);
    }
}
#+end_src

* Atomic 類的實現思路
理解 Java 的 CAS 底層原理後, 我們回看 JUC 裡提供的類
** 基礎類型
基礎類型的實現思路:
1. composite 一個 Unsafe Object, 用於調用所有 CAS 相關的方法
2. Atomic 基礎類型內部有一個 value 變量, 於儲存 CAS 實際操作的對象
3. 實際 CAS 操作是使用 Unsafe 提供的 *對屬性修改* 的 CAS 方法: 傳入 this 和 value offset 來修改 value 的值
*** Unsafe Object 和 valueOffset
三種類型 composite 的 Unsafe Object 和 valueOffset 都相同, 並且透過 unsafe.objectFieldOffset 獲取 valueOffset:
#+begin_src java
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final long valueOffset;

    static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicInteger.class.getDeclaredField("value"));
        } catch (Exception ex) { throw new Error(ex); }
    }
#+end_src
*** value 和 CAS
另外, 併發問題除了原子性外, 還有可見性問題, 而在使用 JUC 的 Atomic 類時, 可見性問題是透過 volatile 修飾 value 保證的, 這點要格外注意。

AtomicInteger :
#+begin_src java
    private volatile int value;

    public final boolean compareAndSet(int expect, int update) {
        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
    }

#+end_src

AtomicLong 的 value:
#+begin_src java
    private volatile long value;
    public final boolean compareAndSet(long expect, long update) {
        return unsafe.compareAndSwapLong(this, valueOffset, expect, update);
    }
#+end_src

AtomicBoolean 的 value, 可以發現, AtomicBoolean 底層是 AtomicInteger, 只是規定了 value 值只能是 0 或 1:
#+begin_src java
    private volatile int value;

    public final boolean compareAndSet(boolean expect, boolean update) {
        int e = expect ? 1 : 0;
        int u = update ? 1 : 0;
        return unsafe.compareAndSwapInt(this, valueOffset, e, u);
    }
#+end_src

** 數組類型
數組類型:
1. composite 一個 Unsafe Object, 用於調用所有 CAS 相關的方法
2. Atomic 數組類型都有一個 array, 用於儲存 CAS 實際操作的對象
3. 實際 CAS 操作時, 是使用 Unsafe 提供的 *對屬性修改* 的方法: 傳入 array 以及 index, 透過 index 和類型計算出要 CAS 對象的具體位址, 然後做 CAS 操作

*** 計算 offset
用於計算 offset 相關的變量有:
 * array.class: 有 int[], long[], 和 Object[]
 * base: array.class 的 offset
 * i: 要操作的對象

AtomicIntegerArray:
#+begin_src java
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final int base = unsafe.arrayBaseOffset(int[].class);
    private static final int shift;
    private final int[] array;

    static {
        int scale = unsafe.arrayIndexScale(int[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error("data type scale not a power of two");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }

    private long checkedByteOffset(int i) {
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
    }

    private static long byteOffset(int i) {
        return ((long) i << shift) + base;
    }

#+end_src

AtomicLongArray:
#+begin_src java
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final int base = unsafe.arrayBaseOffset(long[].class);
    private static final int shift;
    private final long[] array;

    static {
        int scale = unsafe.arrayIndexScale(long[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error("data type scale not a power of two");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }

    private long checkedByteOffset(int i) {
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
    }

    private static long byteOffset(int i) {
        return ((long) i << shift) + base;
    }
#+end_src

AtomicReferenceArray:
#+begin_src java
    private static final Unsafe unsafe;
    private static final int base;
    private static final int shift;
    private static final long arrayFieldOffset;
    private final Object[] array; // must have exact type Object[]

    static {
        try {
            unsafe = Unsafe.getUnsafe();
            arrayFieldOffset = unsafe.objectFieldOffset
                (AtomicReferenceArray.class.getDeclaredField("array"));
            base = unsafe.arrayBaseOffset(Object[].class);
            int scale = unsafe.arrayIndexScale(Object[].class);
            if ((scale & (scale - 1)) != 0)
                throw new Error("data type scale not a power of two");
            shift = 31 - Integer.numberOfLeadingZeros(scale);
        } catch (Exception e) {
            throw new Error(e);
        }
    }

    private long checkedByteOffset(int i) {
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
    }

    private static long byteOffset(int i) {
        return ((long) i << shift) + base;
    }
#+end_src

我們可以看到, 這三種數組類型只有 offset 的具體值不同, 而這取決於 Array 是哪一種類型的數組。
*** array 和 CAS
三種數組類型的 CAS 完全相同, 只有 expect 和 update 類型不同, 都是透過 checkedByteOffset(i) 計算出 offset 並傳給底層的 CAS 調用:
#+begin_src java
    public final boolean compareAndSet(int i, int expect, int update) {
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
    }

    private boolean compareAndSetRaw(long offset, int expect, int update) {
        return unsafe.compareAndSwapInt(array, offset, expect, update);
    }
#+end_src

#+begin_src java
    public final boolean compareAndSet(int i, long expect, long update) {
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
    }

    private boolean compareAndSetRaw(long offset, long expect, long update) {
        return unsafe.compareAndSwapLong(array, offset, expect, update);
    }

#+end_src

#+begin_src java
    public final boolean compareAndSet(int i, E expect, E update) {
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
    }

    private boolean compareAndSetRaw(long offset, E expect, E update) {
        return unsafe.compareAndSwapObject(array, offset, expect, update);
    }

#+end_src
** 引用類型
引用類型的結構與基礎類型相似, 只是 value 變成范型的 pointer:
#+begin_src java
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final long valueOffset;

    static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicReference.class.getDeclaredField("value"));
        } catch (Exception ex) { throw new Error(ex); }
    }

    private volatile V value;
#+end_src

CAS:
#+begin_src java
    public final boolean compareAndSet(V expect, V update) {
        return unsafe.compareAndSwapObject(this, valueOffset, expect, update);
    }
#+end_src

** 屬性的更新器
只是要以 newUpdater 透過 reflection 獲得要修改對象的 pointer 和要修改的屬性的 offset:
#+begin_src java
    @CallerSensitive
    public static <U,W> AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,
                                                                    Class<W> vclass,
                                                                    String fieldName) {
        return new AtomicReferenceFieldUpdaterImpl<U,W>
            (tclass, vclass, fieldName, Reflection.getCallerClass());
    }
#+end_src

注意最後的 offset 是透過 Unsafe 提供的用於計算 attribute 的 offset 方法得到的:
#+begin_src java
        AtomicReferenceFieldUpdaterImpl(final Class<T> tclass,
                                        final Class<V> vclass,
                                        final String fieldName,
                                        final Class<?> caller) {
            final Field field;
            final Class<?> fieldClass;
            final int modifiers;
            try {
                field = AccessController.doPrivileged(
                    new PrivilegedExceptionAction<Field>() {
                        public Field run() throws NoSuchFieldException {
                            return tclass.getDeclaredField(fieldName);
                        }
                    });
                modifiers = field.getModifiers();
                sun.reflect.misc.ReflectUtil.ensureMemberAccess(
                    caller, tclass, null, modifiers);
                ClassLoader cl = tclass.getClassLoader();
                ClassLoader ccl = caller.getClassLoader();
                if ((ccl != null) && (ccl != cl) &&
                    ((cl == null) || !isAncestor(cl, ccl))) {
                    sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
                }
                fieldClass = field.getType();
            } catch (PrivilegedActionException pae) {
                throw new RuntimeException(pae.getException());
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }

            if (vclass != fieldClass)
                throw new ClassCastException();
            if (vclass.isPrimitive())
                throw new IllegalArgumentException("Must be reference type");

            if (!Modifier.isVolatile(modifiers))
                throw new IllegalArgumentException("Must be volatile type");

            // Access to protected field members is restricted to receivers only
            // of the accessing class, or one of its subclasses, and the
            // accessing class must in turn be a subclass (or package sibling)
            // of the protected member's defining class.
            // If the updater refers to a protected field of a declaring class
            // outside the current package, the receiver argument will be
            // narrowed to the type of the accessing class.
            this.cclass = (Modifier.isProtected(modifiers) &&
                           tclass.isAssignableFrom(caller) &&
                           !isSamePackage(tclass, caller))
                          ? caller : tclass;
            this.tclass = tclass;
            this.vclass = vclass;
            this.offset = U.objectFieldOffset(field);
        }
#+end_src

#+begin_src java
        public final boolean weakCompareAndSet(T obj, V expect, V update) {
            // same implementation as strong form for now
            accessCheck(obj);
            valueCheck(update);
            return U.compareAndSwapObject(obj, offset, expect, update);
        }
#+end_src
