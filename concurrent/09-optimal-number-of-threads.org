#+TITLE: 最佳線程數量
我們使用併發的目的, 是希望能釋放機器的性能, 而這裡追求的性能是指 *低延遲, 高吞吐* 。 這兩種性能指標雖然可能有關連, 比如低延遲通常吞吐量就高, 但是延遲是時間維度的指標, 而吞吐量是空間維度的指標, 兩者之間不能互相轉化。而 *釋放機器的性能* 這件事情具體來說, 就是 *提高 I/O 設備和 CPU 的利用率* 。 這件事情看上去已經被操作系統解決了, 但實際上操作系統解決的是單一設備的利用率, 要最大程度的釋放機器的性能, 我們要解決 I/O 設備和 CPU 的綜合利用率的問題, 這件事情操作系統不能幫我們解決, 它只能提供接口, 這個接口就是多線程。

* 利用多線程提昇 I/O 設備和 CPU 的綜合利用率
我們從一個簡單案例開始。 假設一個程序依照 CPU 運算 - I/O 操作 交替的方式執行, 並且假設兩者耗時為 1:1, 並且假設程序執行起來後, 兩種設備的利用率都是 50%:
[[https://static001.geekbang.org/resource/image/d1/22/d1d7dfa1d574356cc5cb1019a4b7ca22.png]]

我們要注意, 當 CPU 計算時, I/O 設備是閒置的, 當 I/O 操作時, CPU 是閒置的, 所以我們可以增加一個線程, 讓閒置的設備可以進行任務切換, 這樣吞吐量就提高了一倍:
[[https://static001.geekbang.org/resource/image/68/2c/68a415b31b72844eb81889e9f0eb3f2c.png]]

我們可以得到一個結論: *當 I/O 和 CPU 的利用率都很低時, 提高線程的數量可以提高吞吐量*

在單核時代, 線程之間切換任務來平衡 I/O 和 CPU 的利用率的, 但 *如果程序僅進行運算, 沒有 I/O 操作時, 提高線程的數量不但不會提高效能, 反而會降低效率, 因為線程切換是有成本的。*  *但是在多核時代, 提高線程數還是會提昇效能, 因為利用多核能降低響應時間。*

這個原因並不難理解, 因為純計算的任務之所以在單核時代不能提昇效能是因為沒有其他閒置的 CPU 可以使用, 切換線程 CPU 也是在全力負載下工作。 而多核情況下, 線程可以被分配到多個 CPU 上運行。

* 合適的線程數量
通常 I/O 設備的效率遠低於 CPU 的效率, 也就是說, 性能瓶頸通常發生在 I/O 上。 在決定合適的線程數量時, 我們要考慮我們的任務是 I/O 密集行的任務, 還是 CPU 密集行的任務。
** CPU 密集行的任務
對於 CPU 密集行的任務, 線程數量理論上和核心數量相同就足夠了, 增加多了只是增加切換線程的成本。不過在工程實現上, 通常是設置 *CPU 核數 + 1*, 因為如果有某種原因導致線程被阻塞, 比如內存失頁, CPU 閒置時, 有一個線程可以立刻頂上, 這樣可以保證更好的 CPU 利用率。
** I/O 密集行的任務
對於 I/O 密集行的任務, 可以先考慮單核的情況。 如果 CPU 的耗時和 I/O 的耗時是 1:1, 那麼最佳線程數量是 2, 如果是 1:2, 最佳線程數量是 3:
[[https://static001.geekbang.org/resource/image/98/cb/98b71b72f01baf5f0968c7c3a2102fcb.png]]

我們可以推出一個公式: 最佳線程數 = CPU 核數 * [1 + (I/O 耗時 / CPU 耗時)]

至於, I/O 耗時 和 CPU 耗時, 最簡單的方式可以用 apm 來測量。
