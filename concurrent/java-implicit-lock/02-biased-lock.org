#+TITLE: 偏向鎖的核心原理
在實際場景中, 一個 synchronized 的對象如果只有一個線程來使用, 那麼這個線程會多次成功獲取鎖對象, 此時如果每次獲取/釋放鎖都要檢查、阻塞線程、喚醒 CPU 從用戶態切換到內核態, 那麼將相當浪廢資源。 偏向鎖就是為了解決這個問題。 *但是要注意, 偏向鎖在 JDK 15 以後將被廢棄, 詳細請見 [[https:https://openjdk.java.net/jeps/374][JEP 374: Deprecate and Disable Biased Locking]]*
* 偏向鎖的原理
*偏向鎖的精神是: 如果沒有競爭, 那麼我將無視 synchronized 關鍵字。*

當一個線程沒有經過競爭就獲取鎖, 那麼此鎖就處於偏向鎖的狀態, 對象頭的 Mark Word 的結構會變為偏向鎖的結構, 也就是將 biased_lock 設置為 1, 然後 thread 將註冊為該線程的 id (透過 CAS 操作完成)。 以後線程嘗試獲取鎖時, 當發現 biased_lock = 1, 先判斷自己是不是該對象所偏好的線程 (比對 thread == Thread.id), 如果是的話會直接進入臨界區, 連 CAS 操作都不需要, 因此偏向鎖的性能和無鎖的性能相等。

以下幾點有關偏向鎖的觀念, 要再次強調:
1. 是否發生競爭才是是否偏向鎖的前提, 而不是偏好的線程
   是否可以擁有偏向鎖的判斷, 是有沒有發生競爭, 因為如果沒發生競爭, 該對象就是無鎖的, 所以多線程併發但沒有競爭的場景下, 不同的線程都可以享有偏向鎖。 如果自己不是偏好的線程, 透過 CAS 操作註冊為偏好線程就好。
2. 偏向鎖沒有釋放鎖操作
   偏向鎖在線程使用完後, 並沒有釋放的操作, Object 的 Mark Word 的狀態並不改變, biased_lock 依然是 1, 也因為沒有釋放操作, 偏向鎖可以達到無鎖的性能。 所以如果當以不競爭的方式獲得鎖, 如果 thread 不是自己, 此時會透過 CAS 操作註冊自己為鎖偏向的線程; 如果 CAS 操作失敗, 說明有其他線程正在競爭, 偏向鎖將被撤銷, 競爭的線程將被掛起, 然後偏向鎖將會膨脹為輕量級鎖。

偏向鎖的缺點是: 如果我們一開始就知道這是一個必存在競爭的場景, 那麼啟用偏向鎖就是多餘的, 撤銷和膨脹將帶來不必要的性能開銷。
* 偏向鎖的啟用
使用 -XX:+UseBiasedLocking, 可以啟用偏向鎖。
JVM 預設在啟動 4 秒後, 才會啟用偏向鎖機制, 因為剛啟動 JVM 時通常要加載資源, 此時如果給對象上偏向鎖, 會有撤銷偏向鎖的開銷, 如果希望取消/修改這個時間, 可以透過設置 -XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0:
#+begin_src shell
java -XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0 mainclass
#+end_src
* revoke and inflation 註銷並膨脹
由於線程離開臨界區時, 偏向鎖並不會被釋放, 因此對於並不是偏向鎖偏好的線程來說, 競爭是這樣發生的: 如果該線程進行上鎖, 會觸發 CAS 操作申請自己註冊為偏向鎖偏好的線程, 如果註冊成功, 則上鎖成功; 如果註冊失敗, 則會執行註銷並膨脹
 * 註銷並膨脹
   1. 在一個安全點停止擁有鎖的線程。
   2. *遍歷線程的 stack frame, 檢查 stack frame 中是否有 lock record 鎖紀錄。 如果有, 需要清空紀錄, 使紀錄呈現為無鎖的狀態, 並修復指向該紀錄的 Mark Word, 清除其線程 ID。*
   3. 將當前鎖膨脹為輕量級鎖。
   4. 喚醒擁有鎖的線程。

 * 觸發註銷
   1. 多於 1 個線程競爭偏向鎖
   2. 調用了偏向鎖對象的 hashcode() 或是 System.identityHashCode()方法計算 HashCode 之后, hashcode 會被紀錄在鎖對象的 Mark Word 中, 偏向鎖會被註銷, 處於無鎖的狀態。


以上可以看出, 存在競爭時, 偏向鎖會降低性能所以, 當一定會發生競爭, 我們可以在一開始就禁止使用偏向鎖。

* JEP 374: Deprecate and Disable Biased Locking
JDK 15 之後, 偏向鎖將被廢棄, 我想理由可能是因為: 偏向鎖是面向低競爭場景的性能優化, 而這樣的場景已經不在是典型的併發場景。 而偏向鎖的底層實現帶來了複雜性與侵入性, 因此 JDK 15 以後, 宣佈 Biased Locking 將被 disable, deprecate, and eventually remove support
