#+TITLE: 輕量級鎖
輕量級鎖存在的目的是, 盡可能不動用重量級鎖。輕量級鎖和重量級鎖的區別在於, 輕量級鎖是靠 CAS 競爭, 而重量級鎖使用了 OS 底層的 Mutex Lock, 會阻塞其他線程, 而線程的阻塞/喚醒需要 CPU 在用戶態/內核態之間切換。 如果我們的臨界區很窄, 一個線程進入臨界區後就立刻出來了, 為此動用重量級鎖是不值得的。 輕量級鎖也稱為 *非同步鎖*, 因為它不像重量級鎖一樣阻塞線程, 而競爭鎖的方式是透過 CAS 自旋操作, 因此也稱做 *自旋鎖*
* 輕量級鎖的原理: CAS 自旋
** 在 stack frame 中建立 lock record
輕量級鎖是自旋鎖, 當線程進入臨界區時, *如果鎖對象處於無鎖狀態*, JVM 首先會在該線程的 stack frame 中建立一個 *lock record 鎖紀錄*, 用於儲存該對象目前的 Mark Word 副本。 下圖展示了 JVM 在 stack frame 中建立了 lock record 的狀態, 注意此時的鎖對象為 *無鎖狀態*, 這說明了即便原來有 *偏向鎖*, 也已經完成註銷:
[[./image/create-lock-record-when-no-lock.png]]
** CAS 自旋操作
然後該線程會以 CAS 自旋操作, 嘗試將鎖對象的 Mark Word 狀態更新為: ptr_to_lock_record 指向自己 stack frame 中的 lock record。 這個行為有點像是, 如果我擁有這個 lightweight lock, 那麼這個對象的 Mark Word 信息, 就被保存在我的 stack frame 裡。 如果 CAS 自旋操作成功, JVM 會將 lock 改為 00, 表示處於輕量鎖狀態。 下圖展示了自旋成功的 frame stack 狀態與鎖對象的狀態:
[[./image/lightweight-lock-record.png]]

我們可以理解 CAS 自旋是: 以不阻塞的方式, 嘗試 *註冊* 自己的 stack frame 中的 *lock record* 為鎖對象的 Mark Word 的引用。
** 自適應自旋鎖
自旋會佔用 CPU, 所以自旋必須有閾值, 否則會發生既發生等待, 又佔用 CPU 的情況, JVM 自適應自旋的原則為: 如果一個鎖透過自旋上鎖, 那麼原則上認為自旋很可能成功, 因此允許多旋幾次試試; 而對於一個鎖, 很少被自旋取得, 那麼傾向省略自旋次數以減少 CPU 空轉。
** 膨脹
輕量級鎖的本意是, 即便是競爭激烈, 如果等待的 CPU 只需要透過幾次自旋就能進入臨界區, 那麼自旋是划算的; 而當自旋次數達到閾值, 輕量級鎖將會膨脹為重量級鎖。
